#!/bin/bash
# common functions

if [ "`whoami`" != "root" ] ; then
	echo "Must be root"
	exit 1
fi

function merge_to_woof_out() {
	if [ -d "$1" ];then
	MERGE_DIRECTORY_NAME=${1##*/}
	if [ "$MERGE_DIRECTORY_NAME" = "patches" ]; then
		echo "Applying patches from ${1}..." | tee -a ${WOOF_OUT}/merge2out.log
		for PATCHFILE in \
		`find ${1} -mindepth 1 -maxdepth 1 -type f -iname '*.patch' | tr '\n' ' '`
		do
			echo "    $PATCHFILE" | tee -a ${WOOF_OUT}/merge2out.log
			PATCHFILE_PATH=$(realpath ${PATCHFILE})
			patch --unified --forward --silent -p 3 --input=${PATCHFILE_PATH} --directory=${WOOF_OUT} 2>&1 | tee -a ${WOOF_OUT}/merge2out.log
		done
	elif [ "$MERGE_DIRECTORY_NAME" = "packages-templates" -o "$MERGE_DIRECTORY_NAME" = "rootfs-packages" ]; then
		echo "Copying ${1}..." | tee -a ${WOOF_OUT}/merge2out.log
		for ONE_DIRECTORY in \
		`find -L ${1} -mindepth 1 -maxdepth 1 -type d | tr '\n' ' '`
		do
			DIRECTORY_NAME=${ONE_DIRECTORY##*/}
			echo "    $DIRECTORY_NAME" | tee -a ${WOOF_OUT}/merge2out.log
			if [ -n "$DIRECTORY_NAME" -a -d "${WOOF_OUT}/${MERGE_DIRECTORY_NAME}/${DIRECTORY_NAME}" ];then
				[ "$WOOF_OUT" != "" ] && rm -r ${WOOF_OUT}/${MERGE_DIRECTORY_NAME}/${DIRECTORY_NAME} 2>&1 | tee -a ${WOOF_OUT}/merge2out.log
			fi
			cp -a ${ONE_DIRECTORY} ${WOOF_OUT}/${MERGE_DIRECTORY_NAME}/ 2>&1 | tee -a ${WOOF_OUT}/merge2out.log
		done
	else
		echo "Copying ${1}..." | tee -a ${WOOF_OUT}/merge2out.log
		MERGE_DIRECTORY_FILES=`find ${1}/* \( -type f -or -type d -or -type l \) -printf '    %f\n'`
		if [ -n "$MERGE_DIRECTORY_FILES" ];then
			echo "$MERGE_DIRECTORY_FILES" | tee -a ${WOOF_OUT}/merge2out.log
			cp -a -f --remove-destination ${1}/* ${WOOF_OUT}/${MERGE_DIRECTORY_NAME}/ 2>&1 | tee -a ${WOOF_OUT}/merge2out.log
		fi
	fi
fi
}
