#!/bin/bash
#(c) Copyright Barry Kauler sept. 2011 bkhome.org
#2011 GPL licence v3 (/usr/share/doc/legal)
#the idea of this script is that it is called when PUPMODE==5 by scripts
#/usr/bin/wmreboot and /usr/bin/wmpoweroff (which are called via the Shutdown menu).
#X is still running.
#the normal shutdown sequence is:
# /usr/bin/wmpoweroff ->(return to) /usr/bin/xwin -> /sbin/poweroff -> /etc/rc.d/rc.shutdown
# /usr/bin/wmreboot ->(return to) /usr/bin/xwin -> /sbin/reboot -> /etc/rc.d/rc.shutdown
#this script is putting up some GUI dialogs while X is still running, so when
#rc.shutdown is reached, it won't have to put up text-mode dialogs.
#to avoid code duplication, get this to work with and without X, and also call this
#script from rc.shutdown. From the console, no X, type "poweroff" or "reboot" will
#also (conditionally) run this script, via rc.shutdown.
#110924 various tweaks. fix default partition highlight.
#111012 a pupdialog window had wrong text, needed different from non-X dialog.
#120327 only show "*RECOMMENDED*" partition for savefile if >256MB free.
#120327 expBOOTDRV needs to be exported to rc.shutdown.
#120427 01micko: support ext4 in save-file. 120428
#120512 Karl Godt: some parameters missing from lines 626, 630, 642.
#120514 Karl Godt: precaution, save-file must be bigger than size used in ram.
#130128 support udf f.s. (see also sfsget, puppyinstaller, pmount, pup_event_frontend_d, drive_all, probepart).
#130216 support f2fs.
#130221 the 240 sec timeout to shutdown without saving, actually aborts timeout. fixed. see also pupdialog, wmpoweroff, wmreboot.
#130525 extend duration of creating save file please wait window.
#130712 fix 130522, 130525 dlgs showing in tray.

export SHUTDOWNCONFIG=1

DEFAULT_SAVE_SIZE=512	#MB
TIMELIMIT=$(echo $TIMELIMIT | tr -dc '0-9')
[ "$TIMELIMIT" ] || TIMELIMIT=60


if [ "$(pidof -s X Xorg $(cat /etc/windowmanager))" != "" ]; then
 [ "$DISPLAY" == "" ] && export DISPLAY=:0
 [ "$WAYLAND_DISPLAY" == "" ] && export WAYLAND_DISPLAY=wayland-0
 [ "$XDG_RUNTIME_DIR" == "" ] && export XDG_RUNTIME_DIR=/tmp/runtime-root
fi


if [ -z "$DISPLAY" -a -z "$WAYLAND_DISPLAY" ];then
 export LANG=C #110928 console shutdown using 'dialog', disable i18n.
else
 export OUTPUT_CHARSET=UTF-8
fi

. gettext.sh # enables use of eval_gettext (several named variables) and ngettext (plurals)
export TEXTDOMAIN=shutdownconfig
T_title="$(gettext 'First shutdown: save session')" # used 8 times
T_nosave="$(gettext 'No suitable partitions to save to. Shutting down without saving.')"
T_continue="$(gettext 'Continue')"
T_abort="$(gettext 'Abort')"
T_no="$(gettext 'No')"
T_notsave="$(gettext 'DO NOT SAVE')"

#/etc/rc.d/rc.shutdown will call shutdownconfig if this file does not exist, then will read its contents...
echo -n "" > /tmp/shutdownconfig_results

. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS

#puppy.sfs is in a subdirectory, default to saving in it...
PUPSFSFILE="`echo "$PUPSFS" | cut -f 3 -d ','`"
PSUBDIR="`dirname "$PUPSFSFILE"`"
[ "$PSUBDIR" = "/" ] && PSUBDIR=""
[ $PUPMODE -eq 5 ] && [ "$DEV1FS" = "iso9660" ] && PSUBDIR="" #100920 booting off cd, always default have savefile at /.
[ $PUPMODE -eq 5 ] && [ "$DEV1FS" = "udf" ] && PSUBDIR="" #130128 ditto, for udf f.s.
[ "$DEV1FS" = "msdos" ] && DEV1FS="vfat"

#120514 Karl Godt: precaution, save-file must be at least this big...
DU_INITRD_PUP_RW=0
[ "`mount | grep ' /initrd/pup_rw '`" != "" ] && DU_INITRD_PUP_RW=`du -B 1M -c /initrd/pup_rw |tail -n1 |awk '{print $1}'` #M=1024,MB=1000

#================================================================

get_DRV() {
  # "$1" - partition - ex: sda3
  ret_DRV=''
  [ "$1" ] || return 1
  local xPART="$1"
  while [ ${#xPART} -gt 2 ]; do
    [ -e /sys/block/$xPART ] && { ret_DRV="$xPART"; break; }
    xPART=${xPART%?}
  done
  return 0
}

choosepartfunc() {
 #dialog to choose what partition to create ${DISTRO_FILE_PREFIX}save.2fs on...
 case "$PMEDIA" in ""|cd|scsicd|satacd|idecd|atacd|usbcd) PCHOOSE="yes" ;; esac
 case "$DEV1FS" in ntfs|xxx) PCHOOSE="yes" ;; esac
 [ "$DEV1FS" = "msdos" ] && DEV1FS="vfat"

 expBOOTDRV=''
 if [ "$PMEDIA" = "usbflash" ];then #may have a small boot partition and a big 2nd.
  expBOOTDRV="/dev/`echo ${PDEV1} | sed -e 's%[0-9]*$%%'`"
  PCHOOSE="yes"
 fi
 if [ "$xPSUBDIR" -a "$PMEDIA" != "cd" ];then #if pup installed in a sub-directory, allow save-file in another partition (in same drive)...
  expBOOTDRV="/dev/`echo ${PDEV1} | sed -e 's%[0-9]*$%%'`"
  PCHOOSE="yes"
 fi
 if [ "$PSAVEPART" != "" ];then #see /etc/rc.d/PUPSTATE
  SAVEPART="${PSAVEPART}"
 fi
 if [ "$SAVEPART" != "" ];then
  SAVEFS="$(blkid /dev/$SAVEPART | grep -o ' TYPE=.*' | cut -f2 -d'"')"
  SAVEFILE="$PSUBDIR/${DISTRO_FILE_PREFIX}save.2fs"
  PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
  return 0
 fi
 if [ "$PCHOOSE" != "yes" ];then
  SAVEFS="$DEV1FS"
  SAVEPART="$PDEV1"
  SAVEFILE="$PSUBDIR/${DISTRO_FILE_PREFIX}save.2fs"
  PUPSAVE="$PDEV1,$DEV1FS,$SAVEFILE"
  return 0
 fi

 #130216 add f2fs...
 PARTSLIST="`probepart -m 2> /dev/null | grep '^/dev/' | grep -E 'f2fs|ext2|ext3|ext4|xfs|btrfs|msdos|vfat|exfat|ntfs' | cut -f 1-3 -d '|' | sed -e 's/msdos/vfat/g'`"

 #nothing to save to...
 if [ "$PARTSLIST" = "" ];then
  if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
   yad --image=dialog-error --layer=overlay --edge=top --text="$T_nosave" --no-buttons --timeout=10
  else
   clear
   echo "$T_nosave"
   sleep 5
  fi
  return 1
 fi
 T_waitprobing="$(gettext 'Please wait, probing partitions...')"
 if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ]; then
  yad --image=system-run --layer=overlay --edge=top --text="$T_waitprobing" --no-buttons &
  ppPID=$!
 fi
 SCHOICES=""; DEFTAG=""
 rm -f /tmp/schoices.txt
 rm -f /tmp/shutdownconfig_deftag
 rm -f /tmp/shutdownconfig_parts_list
 rm -f /tmp/pdev1islinux
 maxLIN=0; maxOTHER=0
 varLEN=${#expBOOTDRV}
 echo "$PARTSLIST" | grep -qw "$PDEV1" && INSTALLED="y" || INSTALLED=""
 echo "$PARTSLIST" |
 while read APART
 do
  ATAG="`echo -n "$APART" | cut -f 1 -d '|' | cut -f 3 -d '/'`"
  [ "${ATAG:0:4}" = "zram" ] && continue
  ASIZE="`echo -n "$APART" | cut -f 3 -d '|'`"
  [ $ASIZE -lt 600 ] && continue
  AFS="`echo -n "$APART" | cut -f 2 -d '|'`"
  case $AFS in
   ext4|ext3|ext2|f2fs|xfs|btrfs)
    [ "$ATAG" = "$PDEV1" ] && touch /tmp/pdev1islinux
    [ $ASIZE -gt $maxLIN ] && { echo "$ATAG" > /tmp/maxlintag; maxLIN=$ASIZE; }
    ;;
   *)
    [ "${APART:0:${varLEN}}" = "$expBOOTDRV" ] || continue
    [ $ASIZE -gt $maxOTHER ] && { echo "$ATAG" > /tmp/maxothertag; maxOTHER=$ASIZE; }
    ;;
  esac
  AFREE=`df -m | grep "/dev/${ATAG} " | tr -s " " | cut -f 4 -d " "`
  if [ ! $AFREE ];then
   mount -t $AFS /dev/$ATAG /mnt/data > /dev/null 2>&1
   #need to put in a check that it is not mounted ro. the
   #mount script will fallback to ro for ntfs if rw mnt fails...
   RETMNTVAL=$?
   if [ $RETMNTVAL -eq 0 ];then
    if [ "`mount | grep '(rw' | grep '/mnt/data'`" = "" ];then
     umount /mnt/data
     RETMNTVAL=1
    fi
   fi
   if [ $RETMNTVAL -eq 0 ];then
     #for ntfs cannot use /dev/$ATAG, use mnt point in grep...
     AFREE=`df -m | grep "/mnt/data" | tr -s " " | cut -f 4 -d " "`
     umount /mnt/data
   fi
  fi
  [ $AFREE -gt 256 ] && echo "$ATAG \"%s $AFS  `gettext 'Size:'` ${ASIZE}M  `gettext 'Free:'` ${AFREE}M %s\" " >> /tmp/shutdownconfig_parts_list
 done
 defTAG=''
 [ -e /tmp/pdev1islinux ] && defTAG="$PDEV1"
 if [ "$defTAG" = "" ]; then
  [ -s /tmp/maxlintag ] && read defTAG < /tmp/maxlintag
 fi
 if [ "$defTAG" = "" ]; then
  [ -s /tmp/maxothertag ] && read defTAG < /tmp/maxothertag
 fi
 [ "$defTAG" ] || defTAG="$PDEV1"
 echo -n " --default-item ${defTAG}" > /tmp/shutdownconfig_deftag
 while read ONE_PART
 do
  if [ "${ONE_PART%% *}" = "$defTAG" ]; then
   echo "$(printf "$ONE_PART" "f.s.:" "`gettext '*RECOMMENDED*'`")" >> /tmp/schoices.txt
  else
   echo "$(printf "$ONE_PART" "`gettext 'Filesystem:'`" "")" >> /tmp/schoices.txt
  fi
 done < /tmp/shutdownconfig_parts_list
 kill $ppPID

 [ -s /tmp/shutdownconfig_deftag ] && DEFTAG="`cat /tmp/shutdownconfig_deftag`"
 [ -s /tmp/schoices.txt ] && SCHOICES="`cat /tmp/schoices.txt`"
 if [ "$SCHOICES" = "" ];then
  if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
   yad --image=dialog-error --layer=overlay --edge=top --text="$T_nosave" --no-buttons --timeout=10
  else
   clear
   echo "$T_nosave"
   sleep 5
  fi
  return 1
 fi
 xSCHOICES="`cat /tmp/schoices.txt | tr '\n' ' '`"

 if [ `echo "$SCHOICES" | wc -l` -eq 1 ];then
  SAVEPART="`echo -n "$SCHOICES" | cut -f 1 -d ' '`" #no need for dlg.
 else
  T_partitiontitle="$(gettext 'First shutdown: choose partition')"
  T_menu="$(gettext 'Please choose a partition to create a pupsave on.')

$(gettext 'For Windows partitions(ntfs/vfat), Puppy makes a file with a Linux filesystem image in it. The size is typically 512MB - 4GB (it can be made bigger later) and preallocated if f.s. or driver lacks support for sparse files.')
$(gettext 'On linux partitions(ext4 and etc.), Puppy makes a folder for pupsave. Unlike single file, the size is not predetermined but limited by the free space of the partition. A Linux partition is recommended, if available.')

$(gettext 'Highlight desired choice, then click OK button...')"
  echo '#!/bin/sh' > /tmp/savedlg
  if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
   echo -n "yad --title=\"${T_partitiontitle}\" --no-collapse --button=gtk-ok --text=\"${T_menu}\" --width=640 --list --no-headers --column=:TEXT --column=:TEXT --print-column=1 --separator= -- " >> /tmp/savedlg
   echo -n "$xSCHOICES"  >> /tmp/savedlg
   echo ' >/tmp/tag.txt' >> /tmp/savedlg
  else
   echo -n "dialog --title \"${T_partitiontitle}\" --no-collapse --no-cancel ${DEFTAG} --menu \"${T_menu}\" 0 0 0 " >> /tmp/savedlg
   echo -n "$xSCHOICES"  >> /tmp/savedlg
   echo ' 2>/tmp/tag.txt' >> /tmp/savedlg
  fi
  chmod 755 /tmp/savedlg

  #seems some people have problem, do not select anything...
  T_notchosentitle="$(gettext 'First shutdown: Not chosen')"
  T_tryagain="$(gettext 'Try again')"
  T_yesno="$(gettext 'ERROR: you did not choose any partition.')

$(eval_gettext 'Choose ${T_tryagain} button to try again...')
$(eval_gettext 'Or, ${T_abort} to shutdown without saving...')"

  while [ 1 ];do
   /tmp/savedlg
   SAVEPART="`cat /tmp/tag.txt | head -n 1`" #head is in case of errs in output.
   if [ "`echo -n "$SAVEPART" | grep --extended-regexp '^hd|^sd|^sc|^fd|^mmcblk|^nvme'`" = "" ];then
    if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
     yad --title="$T_notchosentitle" --button="$T_tryagain"\!gtk-yes --button="${T_abort}"\!gtk-no --text="$T_yesno"
    else
     dialog --title "$T_notchosentitle" --colors --yes-label "$T_tryagain" --no-label "${T_abort}" --yesno "$T_yesno" 0 0
    fi
    [ ! $? -eq 0 ] && return 1 #abort.
    continue
   fi
   break
  done
 fi

 SAVEFS="`echo "$SCHOICES" | grep "^${SAVEPART} " | tr -s " " | cut -f 2 -d ':' | cut -f 2 -d " "`"
 SAVEFILE="$PSUBDIR/${DISTRO_FILE_PREFIX}save.2fs"
 PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
 echo "$PUPSAVE" #TEST
 return 0
} #end choosepartfunc

choosesizefunc(){
 local KFREE SIZELIST NUM CHOICES FLABEL SLABEL ACHOICE KSIZE VALUES VALIDS val
 KFREE=$1 ; SIZELIST="" ; NUM=1 ; CHOICES=""
 MFREE=`expr $KFREE \/ 1024`
 FLABEL="${MFREE}MB"
 [ $KFREE -ge 1048576 ] && FLABEL="`dc -e "$KFREE 1048576 2 k / p"`GB"
 VALUES='32 64 128 256 512 768 1024 1280 2048 4096'
 for val in $VALUES;do
 [ "$val" -gt "$DU_INITRD_PUP_RW" ] && VALIDS="$VALIDS $val"
 done
  #global: DEFAULT_SAVE_SIZE in MB
 [ $DEFAULT_SAVE_SIZE -gt 0 ] || DEFAULT_SAVE_SIZE=512
 local NDEFAULT=1
 for ACHOICE in $VALIDS
 do
  [ $ACHOICE -le $DEFAULT_SAVE_SIZE ] && NDEFAULT=$NUM
  KSIZE=`expr $ACHOICE \* 1024`
  SLABEL="${ACHOICE}MB"
  [ $ACHOICE -ge 1024 ] && SLABEL="`dc -e "$ACHOICE 1024 2 k / p"`GB"
  if [ $KSIZE -lt $KFREE ];then
   SIZELIST="$SIZELIST$NUM $SLABEL "
   CHOICES="$CHOICES$KSIZE "
  else
   SIZELIST="$SIZELIST$NUM fill_partition(${FLABEL}) "
   CHOICES="$CHOICES$KFREE "
   break
  fi
  NUM=`expr $NUM + 1`
 done

 T_sizetitle="$(gettext 'First shutdown: size save-file')"
 T_sitemenu="$(gettext 'Please choose the size you would like for the personal save file.')
$(gettext 'Note, 512M is a good choice, or highest if that not available.')
$(gettext 'Select choice, then click OK button...')"
 if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
  NUM=`yad --title="$T_sizetitle" --button=gtk-ok --text="$T_sitemenu" --list --no-headers --column=:NUM --column=:TEXT --hide-column=1 --print-column=1 --separator= -- $SIZELIST`
 else
  dialog --title "$T_sizetitle" --no-collapse --no-cancel --default-item "$NDEFAULT" --menu "$T_sitemenu" 0 0 0 $SIZELIST 2>/tmp/sizetag.txt
  NUM=`cat /tmp/sizetag.txt`
 fi
 ACHOICE=`echo -n "$CHOICES" | cut -f $NUM -d ' '`
 #return $ACHOICE
 SIZEPFILE=$ACHOICE #global variable.
} # end of choosesizefunc()

choosestyle() {
 T_fstitle="$(gettext 'First shutdown: choose saving style')"
 T_fsmenu="$(gettext "You can save the session in a 'folder(directory)' because you chose a Linux partition. Unlike single file, saving in a folder is not restricted to the fixed file size but by the free space on the partition. You can save multiple profiles by different name.")
 
 $(gettext "A folder is recommended for this case, but you still have another option if you have some reason and you want it.")"
 T_folder="$(gettext 'Save in a folder.') $(gettext '*RECOMMENDED*')"
 T_partition=$(gettext "Save to the entire partition. Only one profile.")
 T_file=$(gettext 'Single file, ext4 filesystem image in it.')
 if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
  yad --title="$T_fstitle" --button=gtk-ok --text="$T_fsmenu" --width=640 --list --no-headers --column=:TEXT --column=:TEXT --hide-column=1 --print-column=1 --separator= -- folder "$T_folder" file "$T_file" >/tmp/rc.shutdown_pupsave_style
 else
  dialog --title "$T_fstitle" --colors --no-cancel --default-item folder --menu "$T_fsmenu" 0 0 0 folder "$T_folder" file "$T_file" 2>/tmp/rc.shutdown_pupsave_style
 fi
 SAVESTYLE=$(cat /tmp/rc.shutdown_pupsave_style)
 [ "$SAVESTYLE" ] || SAVESTYLE="folder"
}

choosesize() {
 #we should check to see that there is enough space on the partition...
 PARTFREE=`df | grep "$SMNTPT" | tr -s " " | head -n 1 | cut -f 4 -d " "`
 [ ! $PARTFREE ] && PARTFREE=0
 [ $PARTFREE -lt 32768 ] && PARTFREE=`expr $PARTFREE - 1024` #leave some slack space.
 [ $PARTFREE -gt 32768 ] && PARTFREE=`expr $PARTFREE - 8192` #leave some slack space.
 SIZEPFILE=524288 #512M = 524288K
 [ $SIZEPFILE -gt  $PARTFREE ] && SIZEPFILE=$PARTFREE
 [ $PARTFREE -gt 32768 ] && choosesizefunc $PARTFREE #sets SIZEPFILE
 [ $SIZEPFILE -lt 5000 ] && return 1 #precaution. rerwin discovered this.
 return 0
}

choosefs(){
 T_fstitle="$(gettext 'First shutdown: choose filesystem')"
 T_fsmenu="$(gettext 'Previously, Puppy has only offered 'ext2', now there is a choice. Regarding power-failure, note that Puppy will do a f.s. check at next boot so f.s. can recover, however journalled filesystems can recover even without a f.s. check. If in doubt, choose 'journalled'. After making the choice, click OK button...')"
 T_ext4="$(gettext 'Journalled f.s., safest if power failure etc.')"
 T_ext4_nj="$(gettext 'Non-journalled f.s., reduces writing to disk etc.')"
 if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
  yad --title="$T_fstitle" --button=gtk-ok --text="$T_fsmenu" --width=640 --list --no-headers --column=:NUM --column=:TEXT --hide-column=1 --print-column=1 --separator= -- 1 "$T_ext4" 2 "$T_ext4_nj" >/tmp/rc.shutdown_pupsave_fs
 else
  dialog --title "$T_fstitle" --no-cancel --default-item ext4 --menu "$T_fsmenu" 0 0 0 1 "$T_ext4" 2 "$T_ext4_nj" 2>/tmp/rc.shutdown_pupsave_fs #120425 01micko
 fi
 CHOICE="`cat /tmp/rc.shutdown_pupsave_fs`"
 SFFS='ext4'
 SFFSOPTS=''
 [ "$CHOICE" = '2' ] && SFFSOPTS='-O ^has_journal'
 SFEXT="4fs"
}

choosename() {
 #customise the name of the ${DISTRO_FILE_PREFIX}save file...
 T_nametitle="$(gettext 'First shutdown: pupsave name')"
 T_nameinput="$(eval_gettext "Would you like to customise the name of the '\${DISTRO_FILE_PREFIX}save'?")

$(eval_gettext "This is optional, but it is convenient to manage multiple profiles. If you have lots of '\${DISTRO_FILE_PREFIX}save' and you want to choose the right one at startup.")
$(eval_gettext "For example, if you enter 'john' here, the file will become '\${DISTRO_FILE_PREFIX}save-john'.")

$(gettext 'Type any alpha-numeric characters you wish, then click OK button:')"
 if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
  MYUSERNAME="`yad --title="$T_nametitle" --button=gtk-ok --text="$T_nameinput" --width=640 --entry`"
 else
  MYUSERNAME="`dialog --title "$T_nametitle" --stdout --nocancel --inputbox "$T_nameinput" 0 0 ""`"
 fi
 NAMEONLY="${DISTRO_FILE_PREFIX}save${CRYPT_NAME}"
 if [ "$MYUSERNAME" != "" ];then
  MYUSERNAME="`echo -n "$MYUSERNAME" | tr ' ' '_' | tr '-' '_' | sed -e 's/[^a-zA-Z0-9_.]//g'`"
  NAMEONLY="$NAMEONLY-${MYUSERNAME}"
 fi
}

choosecrypt_new() {
 CRYPTO=""
 T_cryptotitle="$(gettext 'First shutdown: encryption')"
 T_cryptono="$(gettext 'NORMAL (no encryp.)')"
 T_cryptoheavy="$(gettext 'Encrypt with LUKS')"
 T_yesno="$(eval_gettext "Do you want to encrypt the '\${DISTRO_FILE_PREFIX}save'?")
$(eval_gettext "If the '\${DISTRO_FILE_PREFIX}save' is encrypted, then a password will have to be entered at every bootup. The reason for doing this is security, as no one else will be able to see what is inside the \${DISTRO_FILE_PREFIX}save. Encryption does slow \${DISTRO_NAME} down.")

LUKS = Linux Unified Key Setup.

$(eval_gettext "Encrypted \${DISTRO_FILE_PREFIX}save files have another advantage, they allow multiple users. Recommended if spouse and kids are going to be using the same \${DISTRO_NAME} installation.")

$(gettext 'Unless you have a good reason to use encryption, it is recommended not to, to avoid the overhead. Recommend choose NORMAL button...')"
 if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
  yad --title="$T_cryptotitle" --text="$T_yesno" --width=640 --button="$T_cryptono":1 --button="$T_cryptoheavy":2
  RETVAL=$(($?-1))
 else
  dialog --title "$T_cryptotitle" --colors --yes-label "$T_cryptono" --no-label "$T_cryptoheavy" --yesno "$T_yesno" 0 0 #110926
  RETVAL=$?
 fi
 if [ $RETVAL -eq 1 ];then
  T_passtitle="$(gettext 'First shutdown: password')"
  T_passtext="$(gettext 'Please choose a password.
This must be remembered and entered at every bootup.')"
  while [ 1 ];do
    if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ] ; then
      MYPASSWORD="$(yad --title="$T_passtitle" --icon=dialog-question --text="$T_passtext" --entry --hide-text --button=gtk-ok)"
    else
      MYPASSWORD="`dialog --title "$T_passtitle" --screen-center --stdout --no-cancel --inputbox "$T_passtext" 0 0 "puppyisgreat"`" #110926
    fi
    [ "$MYPASSWORD" ] && break
  done
  CRYPTO='luks'
  CRYPT_NAME="_luks"
 fi
}

nameclash() {
 #save with different name if clash...
 [ ! -e $SMNTPT$SAVEFILE ] && return 0
 NAMEONLY=$(basename "$SAVEFILE")
 NAMEROOT=${NAMEONLY%.*}
 MNAMEONLY=$NAMEROOT
  T_clashtitle="$(gettext 'First shutdown: name clash')"
  T_save="$(gettext 'SAVE')"
  T_yesno="$(eval_gettext "There already exists '\${NAMEONLY}' on the partition you chose.")

$(eval_gettext 'To create another one, with a slightly different name (such as ${MNAMEONLY}-1.${SFEXT}), select ${T_save} button...')
$(eval_gettext 'To quit without saving, select ${T_no} button...')"
  if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
   yad --title="$T_clashtitle" --text="$T_yesno" --button="$T_save"\!gtk-yes --button=gtk-no
  else
   dialog --title "$T_clashtitle" --colors --yes-label "$T_save" --yesno "$T_yesno" 0 0
  fi
  [ ! $? -eq 0 ] && return 1
  local BLA=1 #; local SFFIX=`echo "$SAVEFILE" | tail -c 5`
  while [ -e $SMNTPT$SAVEFILE ]; do
   SAVEFILE="$PSUBDIR/${NAMEROOT}-${BLA}"
   [ "${SFEXT}" ] && SAVEFILE="$SAVEFILE.${SFEXT}"
   BLA=`expr $BLA + 1`
  done
}

enmount() {
 sPTN="/dev/${SAVEPART} "
 SMNTPT="`mount | grep "$sPTN" | head -n1 | tr -s " " | cut -f 3 -d " "`"
 if [ "$SMNTPT" = "" ];then
  mkdir /mnt/$SAVEPART 2>/dev/null
  mount /dev/$SAVEPART /mnt/$SAVEPART
  SMNTPT="/mnt/$SAVEPART"
 fi
 return 0
}

changefolder() {
   T_choosefoldertitle="$(gettext 'First shutdown: choose folder')"
   T_inputbox="$(gettext 'Edit path. '/' means top-level of partition.
If folder does not exist, it will be created. Spaces are not allowed.
If uncertain, just click OK button.')"
   if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
      NEWSAVEPATH="`yad --title="$T_choosefoldertitle" --button=gtk-ok --entry --text="$T_inputbox"`"
   else
      NEWSAVEPATH="`dialog --title "$T_choosefoldertitle" --screen-center --stdout --no-cancel --inputbox "$T_inputbox" 0 0 "$SAVEPATH"`"
   fi
   [ "$NEWSAVEPATH" = "" ] && NEWSAVEPATH="$SAVEPATH"
   [ "`echo -n "$NEWSAVEPATH" | cut -b 1`" != "/" ] && NEWSAVEPATH="/${NEWSAVEPATH}"
   [ "$NEWSAVEPATH" != "/" ] && NEWSAVEPATH="`echo -n "$NEWSAVEPATH" | sed -e 's%/$%%'`"
   NEWSAVEPATH="`echo -n "$NEWSAVEPATH" | sed -e 's/ //g'`"
   SAVEPATH="$NEWSAVEPATH"
   SAVEPATHs="$SAVEPATH"
   [ "$SAVEPATH" != "/" ] && SAVEPATHs="${SAVEPATH}/"
   SAVEFILE="${SAVEPATHs}${NAMEONLY}"
   PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
}

pupsavefunc() {
 SAVEPATH="`dirname $SAVEFILE`"
 #final sanity check...
 AAAMB=`expr $SIZEPFILE \/ 1024`
 T_sanititle="$(gettext 'First shutdown: sanity check')"
 T_saniyes="$(gettext 'YES, SAVE')"
 T_sanichange="$(gettext 'CHANGE FOLDER')"
 while [ 1 ];do
  nameclash || return 1
  SAVEPATH=$(dirname "$SAVEFILE")
  [ "$SAVEPATH" = '/' ] && SAVEPATH=''
  NAMEONLY=$(basename "$SAVEFILE")
  T_sanitext="`eval_gettext \"FINAL SANITY CHECK:
Partition you are saving to:      \\\${SAVEPART}
The filesystem of \\\${SAVEPART} partition: \\\${SAVEFS}
Name of the save file:            \\\${NAMEONLY}
Path (folder) of the save file:   \\\${SAVEPATH}
Size of save file:                \\\${SIZEPFILE}KB (\\\${AAAMB}MB)
Encryption:                       \\\${CRYPTO}
Filesystem inside save file:      \\\${SFFS}
Filesystem options:               \\\${SFFSOPTS}

If they definitely look right, choose \\\${T_saniyes} button...
Looks ok, but you want to change the folder, choose \\\${T_sanichange}...
If anything looks wrong, choose \\\${T_notsave}...\"`"
  if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
   yad --title="$T_sanititle" --button="$T_saniyes"\!gtk-yes --button="$T_sanichange":3 --button="$T_notsave"\!gtk-no --text="$T_sanitext"
  else
   dialog --title "$T_sanititle" --colors --no-collapse --extra-button --yes-label "$T_saniyes"  --extra-label "$T_sanichange" --no-label "$T_notsave" --yesno "$T_sanitext" 0 0 #110926
  fi
  SANITYRET=$?
  [ $SANITYRET -ne 0 -a $SANITYRET -ne 3 ] && return 1
  [ $SANITYRET -eq 0 ] && break
  if [ $SANITYRET -eq 3 ];then #change folder.
   changefolder
  else
   SAVEFILE="${SAVEPATH}${NAMEONLY}"
   PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
  fi
 done
 [ -f ${SMNTPT}${SAVEPATH} ] && return 1 #abort. must be a directory.
 [ ! -d ${SMNTPT}${SAVEPATH} ] && mkdir -p ${SMNTPT}${SAVEPATH}
 [ ! -d ${SMNTPT}${SAVEPATH} ] && return 1 #some kind of error, abort.

 #echo "Creating $NAMEONLY in /dev/$SAVEPART, please wait awhile..."
 T_createtitle="$(gettext 'First shutdown: creating save-file')"
 T_createsf="$(eval_gettext "Creating \${NAMEONLY} in \${SAVEPART}, please wait awhile (no need to click OK button)...")"
 altT_createsf="$(eval_gettext "Creating \${NAMEONLY} in \${SAVEPART}, please wait awhile...")"
 if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
  #create nice window looking like prior ones...
  yad --layer=overlay \
      --edge=top \
      --text="<b>${T_createtitle}</b>\n${altT_createsf}" \
      --no-buttons &
  w1PID=$!
 else
  dialog --title "$T_createtitle" --colors --yes-label "OK" --msgbox "$T_createsf" 0 0 &
  w1PID=$!
 fi
 dd if=/dev/zero of=${SMNTPT}$SAVEFILE bs=1k count=$SIZEPFILE conv=sparse >&2
 sync
 echo "`eval_gettext \"Creating a \\\${SFFS} filesystem in \\\${NAMEONLY}...\"`"
 if [ "$CRYPTO" = "" ];then
  mkfs.${SFFS} -q -m 0 -F ${SMNTPT}$SAVEFILE ${SFFSOPTS}
  #...default is f.s. auto checked every 26 mounts or 180 days. tune2fs to change.
  kill $w1PID #130525 moved down.
 else
  #note: loop2 is kept available for scripts to use. but, find which is free...
  echo -e "Save this log somewhere and close this window to continue...\n" >/tmp/mk2fs.log
  DEVLOOP="$(losetup -f)"
  losetup -v $DEVLOOP ${SMNTPT}$SAVEFILE >>/tmp/mk2fs.log
  echo -n "$MYPASSWORD" | cryptsetup luksFormat -v $DEVLOOP --type luks1 - &>>/tmp/mk2fs.log
  echo -n "$MYPASSWORD" | cryptsetup luksOpen -v $DEVLOOP savefile - &>>/tmp/mk2fs.log
  mkfs.${SFFS} -q -m 0 -F /dev/mapper/savefile ${SFFSOPTS} &>>/tmp/mk2fs.log
  if [ $? -ne 0 ] ; then
    kill $w1PID
    yad --title=Error --window-icon=dialog-error --image=dialog-error --text="$(gettext 'Unable to create filesystem')" --button=gtk-ok
    defaulttextviewer /tmp/mk2fs.log
  fi
  sync
  kill $w1PID #130525 moved down.
  [ "$CRYPTO" = "luks" ] && cryptsetup luksClose savefile
  losetup -d $DEVLOOP
 fi
 sync
 return 0
} #end pupsavefunc

save_directory() {
 #final sanity check...
 T_sanititle="$(gettext 'First shutdown: sanity check')"
 T_saniyes="$(gettext 'YES, SAVE')"
 T_sanichange="$(gettext 'CHANGE FOLDER')"
 while [ 1 ];do
  nameclash || return 1
  SAVEPATH=$(dirname "$SAVEFILE")
  [ "$SAVEPATH" = '/' ] && SAVEPATH=''
  NAMEONLY=$(basename "$SAVEFILE")
  T_sanitext="`eval_gettext \"FINAL SANITY CHECK:
Partition you are saving to:      \\\${SAVEPART}
The filesystem of \\\${SAVEPART} partition: \\\${SAVEFS}
Path (folder) of the pupsave:   \\\${SAVEPATH}/${NAMEONLY}

If they definitely look right, choose \\\${T_saniyes} button...
Looks ok, but you want to change the folder, choose \\\${T_sanichange}...
If anything looks wrong, choose \\\${T_notsave}...\"`"
  if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
   yad --title="$T_sanititle" --button="$T_saniyes"\!gtk-yes --button="$T_sanichange":3 --button="$T_notsave"\!gtk-no --text="$T_sanitext"
  else
   dialog --title "$T_sanititle" --colors --no-collapse --extra-button --yes-label "$T_saniyes"  --extra-label "$T_sanichange" --no-label "$T_notsave" --yesno "$T_sanitext" 0 0 #110926
  fi
  SANITYRET=$?
  [ $SANITYRET -ne 0 -a $SANITYRET -ne 3 ] && return 1
  [ $SANITYRET -eq 0 ] && break
  if [ $SANITYRET -eq 3 ];then #change folder.
   changefolder
  else
   SAVEFILE="${SAVEPATH}${NAMEONLY}"
   PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
  fi
 done

 mkdir -p $SMNTPT$SAVEFILE 2>/dev/null

 PUPMODE=128
 SAVEPART=${SAVEPART}
 SAVEFS=${SAVEFS}
 PUPSAVE=${PUPSAVE}
 SAVEFILE=${SAVEFILE}
 NAMEONLY=${NAMEONLY}
 SAVEPATH=${SAVEPATH}
 MYPASSWORD=''
 SFEXT=''
 xPDEV=${PDEV1}
 xDEVFS=${DEV1FS}
 xPSUBDIR=${PSUBDIR}
 SMNTPT=${SMNTPT}
 CRYPTO=''
 expBOOTDRV=${expBOOTDRV}
} #end sace_directory

autosavefunc() {
 [ $PUPMODE -eq 5 ] || return 1
 if [ "$SAVEPART" = "" ];then
   if [ "$PSAVEPART" != "" ];then
     SAVEPART="${PSAVEPART}"
   else
     SAVEPART="${PUPSFS%%,*}"
   fi
 fi
 if [ "$SAVEPART" != "" ];then
   SAVEFS="$(blkid /dev/$SAVEPART | grep -o ' TYPE=.*' | cut -f2 -d'"')"
   enmount
   case $SAVEFS in
     ext?|xfs|btrfs|f2fs) SAVEFS_IS_LINUX="y";;
     *) SAVEFS_IS_LINUX="";;
   esac
   if [ "$SAVEFS_IS_LINUX" = "y" ];then
     SAVEFILE="${PSUBDIR}/${DISTRO_FILE_PREFIX}save"
     if [ -e "${SMNTPT}${SAVEFILE}" ];then
       umount ${SMNTPT} 2>/dev/null
       SMNTPT=''
       SAVEPART=''
       return 1
     fi
     mkdir -p "${SMNTPT}${SAVEFILE}" 2>/dev/null
     SAVEPATH=$(dirname "$SAVEFILE")
     [ "$SAVEPATH" = '/' ] && SAVEPATH=''
     PUPMODE=128
     return 0
   fi
 fi
 SAVEPART=''
 return 1
}

#================================================================

xDEVFS="$DEV1FS"
xPDEV="$PDEV1"

[ ! "$DEV1FS" ] && xDEVFS='xxx' #this will enable choice of create a save-file.

if [ "$PSAVEPART" ]; then
    if [ "$(blkid /dev/$PSAVEPART)" = "" ];then #specified drive not present
        echo "PUPMODE=5" > /tmp/shutdownconfig_results
        exit
    fi
fi

SAVECHOICE=255

# some word processing now...
T_canceltitle="$(gettext 'Click close-box to cancel shutdown')"
T_countdown="$(gettext 'Shutdown in TIME seconds')"
T_savetofile="$(gettext 'SAVE TO FILE')"
T_savetopart="`eval_gettext \"SAVE TO \\\${xPDEV}\"`"
T_orwait240=""
[ $TIMELIMIT -gt 0 ] && \
T_orwait240=$(printf "$(gettext '(Or, wait %s seconds to shutdown without saving anything)')" "$TIMELIMIT")

T_save="$(gettext 'SAVE')"

#130221 note, pupdialog will exit with 255 if click window close-box, 254 if timeout.
# former, want to abort shutdown, latter, shutdown without saving.
xPSUBDIR="`echo -n "$PUPSFS" | cut -f 3 -d ',' | sed -e 's%/[^/]*$%%'`" #ex: sda3,vfat,/pup220/puppy.sfs will return /pup220
T_ms="`eval_gettext \"You can save the session and all of the settings and personal data created so far.

If unsure, it is recommended that you do save the session, so all your personal settings and files will be automatically loaded at next boot.\"`"
if [ -n "$DISPLAY" -o -n "$WAYLAND_DISPLAY" ];then
  T_display="`eval_gettext \"Click the \\\${T_save} button to be provided with the available save options, or click \\\${T_no} to exit immediately without saving anything.\"`" #111012 fix.
  yad --title="$T_title" \
      --window-icon=gtk-save \
      --text="${T_ms}\n${T_canceltitle}\n\n$(gettext 'Shutdown in 60 seconds.')" \
      --width=640 \
      --timeout=60 \
      --timeout-indicator=bottom \
      --button="$T_save"\!gtk-yes \
      --button="$T_no"\!gtk-no:2
  case $? in
   0)   SAVECHOICE=0   ;;
   252) SAVECHOICE=255 ;;
   *)   SAVECHOICE=20  ;;
  esac
else
  T_display="`eval_gettext \"Select \\\${T_save} (just press ENTER key) to be provided with the available save options, or select \\\${T_no} (TAB then ENTER) to exit without saving.\"`"
  yesno="$T_ms \n\n$T_display \n\n$T_orwait240"
  dialog --colors --title "$T_title" --timeout $TIMELIMIT --no-label "$T_no" --yes-label "$T_save" --yesno "$yesno" 0 0 #120512
  SAVECHOICE=$?
fi

case $SAVECHOICE in
 0)
  if autosavefunc; then
    echo "$(gettext 'Doing autosave')"
  elif choosepartfunc; then
    enmount
    case $SAVEFS in
      ext?|xfs|btrfs|f2fs) SAVEFS_IS_LINUX="y";;
      *) SAVEFS_IS_LINUX="";;
    esac
    SAVESTYLE='file'
    SFEXT=''
    if cryptsetup --help >/dev/null 2>&1 && modprobe dm-crypt && modprobe xts ; then
      choosecrypt_new
    fi
    [ -z "$CRYPTO" ] && [ "$SAVEFS_IS_LINUX" ] && choosestyle
    if [ "$SAVESTYLE" = "file" ]; then
       choosefs
       choosesize || exit	###FIXME###
    fi
    choosename
    NAMEROOT="$NAMEONLY"
    [ "${SFEXT}" ] && NAMEONLY="$NAMEROOT.${SFEXT}"
    SAVEFILE="$PSUBDIR/$NAMEONLY"
    #nameclash || exit	###FIXME###
    PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
    case "$SAVESTYLE" in
      folder) save_directory && PUPMODE=128;;
      file) pupsavefunc && PUPMODE=128;;
    esac
  fi
 ;;
 3)   echo     ;; #case already handled above.
 255) exit 255 ;; #wmreboot and wmpoweroff can cancel shutdown. 130221
 *)   echo "$(gettext 'Shutting down without saving...')" ;;
esac

#--------------------------------------------------

#record all variables to a file...
#20140716 SFR: but first escape ' (if present) in MYPASSWORD
MYPASSWORD="`echo "$MYPASSWORD" | sed -e "s#'#'\\"'\\"'#g"`"
echo "PUPMODE=${PUPMODE}
SAVEPART='${SAVEPART}'
SAVEFS='${SAVEFS}'
SAVEFILE='${SAVEFILE}'
PUPSAVE='${SAVEPART},${SAVEFS},${SAVEFILE}'
NAMEONLY='${NAMEONLY}'
SAVEPATH='${SAVEPATH}'
MYPASSWORD='${MYPASSWORD}'
SFEXT='${SFEXT}'
xPDEV='${xPDEV}'
xDEVFS='${xDEVFS}'
xPSUBDIR='${xPSUBDIR}'
SMNTPT='${SMNTPT}'
CRYPTO='${CRYPTO}'
expBOOTDRV='${expBOOTDRV}'" > /tmp/shutdownconfig_results

exit 0
#the end#
