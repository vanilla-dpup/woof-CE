#!/bin/bash
# requires /usr/sbin/pdsk

export TEXTDOMAIN=bootflash
export OUTPUT_CHARSET=UTF-8

[ "`whoami`" != "root" ] && exec sudo -A ${0} ${@} #110505

if [ "$1" = "debug" ] ; then
	exec &>/tmp/${0##*/}.log ; set -x ; env #debug
	shift
fi

. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS

PARAM1=""
if [ $1 ] ; then
	probedisk -extended-usb -card-as-usbflash | grep usbflash | grep "/${1}|" || exit
	PARAM1="$1"
	USBDRV="$PARAM1"
fi

if [ "$USBDRV" = "" ];then
	FDS=$(probedisk -extended-usb -card-as-usbflash -plus-size -hr | grep usbflash)
	if [ -z "$FDS" ] ; then
		yad --title=Bootflash --window-icon=dialog-error --image=dialog-error --text="$(gettext 'No USB drive plugged in')" --button=gtk-ok
		exit 1
	fi
	echo "$FDS" | sed 's|/dev/||' | \
	while read USBINFO
	do
		IFS="|" read -r ONEUSB USBTYPE USBINFO USBSIZE <<< "$USBINFO"
		if [ "$USBSIZE" = "0" -o "$USBSIZE" = "0B" ] ; then
			continue # /dev/sdd|usbdrv|Multi Flash Reader|0
		fi
		echo "$ONEUSB \"Flash memory, ${USBINFO}, ${USBSIZE}\""
	done > /tmp/xselections$$
	xSELECTIONS="`cat /tmp/xselections$$ | tr '\n' ' ' | tr -s ' '`"
	rm -f /tmp/xselections$$
	CHOOSEDLG="yad --title=\"$(gettext 'BootFlash: make USB drive bootable')\" --width=640 --height=240 --button=gtk-ok --text=\"$(gettext 'Choose which drive to format:')\" --list --no-headers --column=:TEXT --column=:TEXT --print-column=1 --separator= -- ${xSELECTIONS}"
	DRVSEL="`eval "$CHOOSEDLG"`"
	[ $? -ne 0 ] && exit
	USBDRV="$DRVSEL"
fi


#======================================================================
#                             FUNCTIONS
#======================================================================

# $1: device
ensure_unmounted() {
	umount $1 2>/dev/null ; sync ; sleep 1
	umount $2 2>/dev/null ; sync
	if [ "`mount | grep "^${1}"`" ] ; then
		yad --title=Bootflash --window-icon=dialog-error --image=dialog-error --buton=gtk-ok \
			--text="$(gettext "${USBDRV} is being used")
$(gettext "${USBDRV} please unmount all the drive partitions and run this script again")"
		exit 1
	fi
}

# $1: device
# $2: fileystem (f2fs) [optional, default vfat]
create_gpt_drv() {
	local XDEV=${1##*/}
	local XFSTYPE=vfat
	local XFSTYPE2=${2}

	ensure_unmounted /dev/${XDEV}
	#-- wipe_existing_partition_table_and_filesystem_signatures
	dd if=/dev/zero of=/dev/${XDEV} bs=1M count=10
	sync
	sleep 1

	# -- create_target_partition_table
	# parted
	if [ "$XFSTYPE2" ] ; then # f2fs
		parted --script -- \
			/dev/${XDEV} \
			mklabel gpt \
			mkpart primary fat32 4MiB 60MiB \
			mkpart primary ext2 100MiB 100%
	else
		parted --script -- \
			/dev/${XDEV} \
			mklabel gpt \
			mkpart primary fat32 4MiB 100%
	fi

	sync
	blockdev --rereadpt /dev/${XDEV}
	mkdosfs -F 32 -v /dev/${XDEV}1
	sleep 1
	case "$XFSTYPE2" in
		f2fs) mkfs.f2fs -f /dev/${XDEV}2 ;;
		ext4) mkfs.ext4 -F -O ^has_journal /dev/${XDEV}2 ;;
	esac
	sync

	blockdev --rereadpt /dev/${XDEV}
	sleep 4
}

# efilinux - make bootable
# $1: targetdir 
# $2: pdrv
# $3: pmedia
copy_efilinux_uefi_boot() {
	local HOMEDIR="$1"
	local PDRV="$2"
	local PMEDIA="$3"

	mkdir -p ${HOMEDIR}/EFI/boot
	cp -f /usr/lib/efilinux/efilinux.efi ${HOMEDIR}/EFI/boot/bootx64.efi

	INITRD="initrd=\initrd.zst"
	[ -f ${SRCPATH}/ucode.cpio ] && INITRD="initrd=\ucode.cpio ${INITRD}"

	APPEND="pfix=fsck pmedia=${PMEDIA}"
	if [ ! "$FSTYPE2" ] ; then
		UUID=$(blkid -o export ${PDRV} | grep ^UUID= | cut -f 2 -d =)
		[ "$UUID" ] && APPEND="${APPEND} pupsfs=${UUID} psave=${UUID}"
	fi

	echo "-f \vmlinuz ${INITRD} ${APPEND}" > ${HOMEDIR}/EFI/boot/efilinux.cfg

	sync
}

# create msdos partition table and 1 partition
# $1 = drv
# $2 = XFSTYPE (vfat, ntfs, ext3, ext4)
# $3 = XFSTYPE2 (f2fs)  (optional - $2 becomes vfat)
create_bios_bootable_drv() {
	local XDEV=${1##*/}
	local XFSTYPE=$2
	local XFSTYPE2=$3

	ensure_unmounted /dev/${XDEV}
	#-- wipe_existing_partition_table_and_filesystem_signatures
	dd if=/dev/zero of=/dev/${XDEV} bs=1M count=10 #bs=512 count=1
	sync
	sleep 1

	# -- create_target_partition_table
	# parted
	if [ "$XFSTYPE2" ] ; then # f2fs
		XFSTYPE=vfat
		parted --script -- \
			/dev/${XDEV} \
			mklabel msdos \
			mkpart primary fat32 4MiB 60MiB \
			mkpart primary ext2 100MiB 100% \
			set 1 boot on
	else
		# https://rainbow.chard.org/2013/01/30/how-to-align-partitions-for-best-performance-using-parted/
		case "$XFSTYPE" in
			vfat) DEVTYPE=fat32 ; mkpart_end='-1s'    ;;
			ntfs) DEVTYPE=NTFS  ; mkpart_end='-1025s' ;; # Leave 512KiB==1024sector in traditional 512bytes/sector disk, disks with sector with more than 512bytes only result in partition size greater than 512KiB and is intentionally let-it-be.
			ext*) DEVTYPE=ext2  ; mkpart_end='-1s'    ;;
		esac
		#mkpart primary fat32 0% 100%
		parted --script -- \
			/dev/${XDEV} \
			mklabel msdos \
			mkpart primary ${DEVTYPE} 4MiB ${mkpart_end} \
			set 1 boot on
	fi
	sync
	sleep 1.5
	blockdev --rereadpt /dev/${XDEV}

	#-- create_target_partition
	case "$XFSTYPE" in
		vfat) mkdosfs -F 32 -v /dev/${XDEV}1 ;;
		ntfs) mkntfs -f /dev/${XDEV}1        ;;
		ext*) mkfs.${XFSTYPE} /dev/${XDEV}1   ;;
	esac
	sleep 1
	case "$XFSTYPE2" in
		f2fs) mkfs.f2fs -f /dev/${XDEV}2 ;;
		ext4) mkfs.ext4 -F -O ^has_journal /dev/${XDEV}2 ;;
	esac

	sync
	blockdev --rereadpt /dev/${XDEV}
	echo 'Wait 4 seconds for block device nodes to populate...'
	sleep 4
	sync
}

# syslinux - make bootable
# $1: targetdir 
# $2: pdrv
# $3: pmedia
# $4: fstype2
create_syslinux_conf() {
	local HOMEDIR="$1"
	local PDRV="$2"
	local PMEDIA="$3"
	local XFSTYPE2="$4"

	INITRD="initrd.zst"
	[ -f ${SRCPATH}/ucode.cpio ] && INITRD="ucode.cpio,${INITRD}"

	APPEND="pfix=fsck pmedia=${PMEDIA}"
	if [ ! "${XFSTYPE2}" ] ; then
		UUID=$(blkid -o export ${PDRV} | grep ^UUID= | cut -f 2 -d =)
		[ "$UUID" ] && APPEND="${APPEND} pupsfs=${UUID} psave=${UUID}"
	fi

	cat << EOF > ${HOMEDIR}/syslinux.cfg
DEFAULT puppy

LABEL puppy
	LINUX vmlinuz
	INITRD ${INITRD}
	APPEND ${APPEND}
EOF

	sync
}

#--

locate_puppy_src_files() { # set $SRCPATH $CDDRIVE
	SRCPATH=""
	CDDRIVE=""
	ASK=""
	#-----
	PDEV1_MP=/initrd/mnt/dev_save
	if [ -f ${PDEV1_MP}${PSUBDIR}/${DISTRO_PUPPYSFS} -a -f ${PDEV1_MP}${PSUBDIR}/vmlinuz -a -f ${PDEV1_MP}${PSUBDIR}/initrd.zst ] ; then
		SRCPATH=${PDEV1_MP}${PSUBDIR}
	else
		ASK=1 #last resort..
	fi
	#-----
	if [ "$ASK" ] ; then
		cd $HOME
		CHOICE=$(yad --title="Puppy Directory" --file --directory --text="$(gettext "Please select a directory containing $DISTRO_NAME $DISTRO_VERSION ")")
		[ $? -ne 0 ] && exit 1
		#--
		if [ -f ${CHOICE}${PSUBDIR}/${DISTRO_PUPPYSFS} ] ; then
			SRCPATH=${CHOICE}${PSUBDIR}
		elif [ -f ${CHOICE}/${DISTRO_PUPPYSFS} ] ; then
			SRCPATH=${CHOICE}
		fi
		#--
	fi
	#===============================
	#sanity check...
	if [ ! -f ${SRCPATH}/${DISTRO_PUPPYSFS} ];then #v3.01 v424 100913
		yad \
			--title="$(gettext 'ERROR')" --button=gtk-ok --text="`eval_gettext \"Oh dear, a 'sanity check' has failed.
This file: \\\$SRCPATH/\\\${DISTRO_PUPPYSFS} does not exist.
The above is supposed to be path-to-where-puppy-files-are/\\\${DISTRO_PUPPYSFS}.
nClick OK button to quit...\"`"
		exit
	fi
} #end locate_puppy_src_files function.

#=================================================================
#                     MAIN DIALOG
#=================================================================

#ITEMS="$ITEMS 3 \"$(gettext '<b>Write .img[.gz|.xz] file to USB drive</b>'\" 4 \"$(gettext '<b>Write Hybrid ISO file to USB drive</b>')\""
RETVAL="`yad --title="Bootflash $USBDRV" --window-icon=gtk-preferences --button=gtk-ok --text="$(gettext 'This tool allows to quickly create a bootable usb drive ready to use. Be aware that ALL DATA ON THE USB DRIVE WILL BE LOST')" --width=640 --list --no-headers --column=:NUM --column=:TEXT --hide-column=1 --print-column=1 --separator= -- 1 "$(gettext 'Create UEFI bootable USB (efilinux + ext4)')" 2 "$(gettext 'Create UEFI bootable USB (efilinux + f2fs)')" 3 "$(gettext 'Create BIOS bootable USB (syslinux + ext4)')" 4 "$(gettext 'Create BIOS bootable USB (syslinux + f2fs)')"`"

BOOTLOADER=efilinux
FSTYPE='vfat'
FSTYPE2='ext4'
case "$RETVAL" in
	1)
		;;
	2)
		FSTYPE2='f2fs' ;;
	3)
		BOOTLOADER=syslinux ;;
	4)
		BOOTLOADER=syslinux
		FSTYPE2='f2fs' ;;
	*)
		exit 1 ;;
esac

ensure_unmounted /dev/${USBDRV}

#reconfirm correct drv choice...
MYSELECTION="`echo "$xSELECTIONS" | grep "^${USBDRV} " | tr '"' ' ' | tr -s ' '`" #'geany
yad --image=dialog-question --title=BootFlash --window-icon=dialog-warning \
	--button=gtk-ok \
	--button=gtk-cancel \
	--text="$(gettext 'Please reconfirm that this is the USB drive that you want to format:')
<b>${MYSELECTION}</b>
`gettext "Please also reconfirm that you want to use BootFlash to reformat the drive (and install Puppy)."`
`gettext "Click 'OK' to continue, 'Cancel' to quit:"`"
	[ $? -ne 0 ] && exit

#make sure not mounted...
while [ "`mount | grep "^/dev/$DRVSEL "`" != "" ];do
	yad --image=dialog-warning --title=BootFlash --window-icon=dialog-warning \
	--button=gtk-ok \
	--button=gtk-cancel \
	--text="$(printf "$(gettext '<b>Drive %s is still mounted. Please unmount it before continuing. If the drive has multiple partitions, are they all unmounted?</b>')" "${DRVSEL}")
$(gettext 'Note: click on the appropriate mounted desktop drive icon, and you will receive an offer to unmount it.')
$(gettext 'Click 'OK' to continue, 'Cancel' to quit:')"
	[ $? -ne 0 ] && exit
	sleep 1
done


#======================================================================
#            DRIVE PARTITIONING / INSTALLATION
#======================================================================

yad --image=system-run --layer=overlay --edge=top --text="$(printf "$(gettext 'Please wait, formatting %s drive...')" "${USBDRV}")" --no-buttons &
X1PID=$!

if [ "$BOOTLOADER" = "syslinux" ] ; then
	create_bios_bootable_drv ${USBDRV} ${FSTYPE} ${FSTYPE2}
	dd if=/usr/lib/SYSLINUX/mbr.bin of=/dev/${USBDRV##*/}
elif [ "$BOOTLOADER" = "efilinux" ] ; then
	create_gpt_drv ${USBDRV} ${FSTYPE2}
else
	exit 1
fi

# need to refresh desktop drive icons(s)...
echo change > /sys/block/${USBDRV}/uevent
sleep 2

kill $X1PID

if [ -z "$SRCPATH" ] ; then
	locate_puppy_src_files
fi

#-----------------------------------------------------------------------

PBOOTPART=${USBDRV}1
mkdir -p /mnt/${PBOOTPART}
mount -t $FSTYPE /dev/${PBOOTPART} /mnt/${PBOOTPART}

if [ "`mount | grep "/dev/${PBOOTPART}"`" = "" ];then
	yad --title=Bootflash --window-icon=dialog-error --image=dialog-error --text="$(gettext 'Error mounting USB drive')" --button=gtk-ok
	exit
fi

yad --image=system-run --layer=overlay --edge=top --text="$(gettext 'Please wait, copying files...')" --no-buttons &
X1PID=$!

if [ "`cat /sys/block/$USBDRV/removable`" = "1" ] ; then
	PMEDIA="usbflash"
else
	PMEDIA="usbhd"
fi

if [ "$BOOTLOADER" = "syslinux" ] ; then
	syslinux /dev/${USBDRV}1
	create_syslinux_conf /mnt/${PBOOTPART} /dev/${PBOOTPART} ${PMEDIA} ${FSTYPE2}
elif [ "$BOOTLOADER" = "efilinux" ] ; then
	copy_efilinux_uefi_boot /mnt/${PBOOTPART} /dev/${PBOOTPART} ${PMEDIA}
fi

FILES2COPY="vmlinuz
initrd.zst
ucode.cpio
${DISTRO_PUPPYSFS}
${DISTRO_ZDRVSFS}
${DISTRO_FDRVSFS}
${DISTRO_ADRVSFS}
${DISTRO_YDRVSFS}
${DISTRO_BDRVSFS}
kbuild-`uname -r`.sfs
devx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs
docx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs
nlsx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"

#-------------------------
if [ "${FSTYPE2}" ] ; then # fat32 + f2fs
	PBOOTPART=${USBDRV}2
	mkdir -p /mnt/${PBOOTPART}/${DISTRO_FILE_PREFIX}save
	mount -t $FSTYPE2 /dev/${PBOOTPART} /mnt/${PBOOTPART}
	if [ "`mount | grep "/dev/${PBOOTPART}"`" = "" ];then
		yad --title=Bootflash --window-icon=dialog-error --image=dialog-error --text="$(gettext 'Error mounting USB drive')" --button=gtk-ok
		exit
	fi
	#-
	cp -fv ${SRCPATH}/vmlinuz /mnt/${USBDRV}1/
	cp -fv ${SRCPATH}/initrd.zst /mnt/${USBDRV}1/
	[ -f ${SRCPATH}/ucode.cpio ] && cp -fv ${SRCPATH}/ucode.cpio /mnt/${USBDRV}1/
	#- get partition UUID
	UUID=$(busybox blkid /dev/${USBDRV}2 | grep -o ' UUID=".*' | cut -f2 -d '"')
	if [ "$UUID" ] ; then
		# need to alter bootmenu
		if [ -f /mnt/${USBDRV}1/EFI/boot/efilinux.cfg ] ; then
			SEDFILES="$SEDFILES /mnt/${USBDRV}1/EFI/boot/efilinux.cfg"
		fi
		if [ -f /mnt/${USBDRV}1/syslinux.cfg ] ; then
			SEDFILES="$SEDFILES /mnt/${USBDRV}1/syslinux.cfg"
		fi
		PUPSFS="pupsfs=$UUID psave=$UUID"
		sed -i \
			-e "s%pmedia=cd%pmedia=cd $PUPSFS%" \
			-e "s%pmedia=usbhd%pmedia=usbhd $PUPSFS%" \
			-e "s%pmedia=usbflash%pmedia=usbflash $PUPSFS%" \
			${SEDFILES}
	fi
	FILES2COPY=$(echo "$FILES2COPY" | grep -v 'vmlinuz|initrd.zst')
fi
#-------------------------

for i in ${FILES2COPY} ; do
	if [ -f ${SRCPATH}/${i} ] ; then
		cp -fv ${SRCPATH}/${i} /mnt/${PBOOTPART}/
	fi
done

sync

umount /mnt/${USBDRV}1
if [ "${FSTYPE2}" ] ; then
	umount /mnt/${USBDRV}2
fi
kill $X1PID

yad --title="$(gettext 'BootFlash: Puppy installed')" --window-icon=dialog-information --image=dialog-information --button=gtk-ok \
--text="<b>$(gettext 'Puppy installed!')</b>
<b>$(gettext 'USB drive now (hopefully) bootable!')</b>
$(gettext 'The desktop drive icons should have been updated, so you can click on them to check that everything looks right. Then reboot and find out for sure...')"

### END ###
