#!/bin/bash
# requires /usr/sbin/pdsk

export TEXTDOMAIN=bootflash
export OUTPUT_CHARSET=UTF-8

[ "`whoami`" != "root" ] && exec sudo -A ${0} ${@} #110505

if [ "$1" = "debug" ] ; then
	exec &>/tmp/${0##*/}.log ; set -x ; env #debug
	shift
fi

. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS

USBDRV="$1"
BOOTLOADER="$2"
FSTYPE2="$3"
SRCPATH="$4"

if [ "$USBDRV" = "" ];then
	[ -z "$WAYLAND_DISPLAY" -a -z "$DISPLAY" ] && exit 1

	FDS=$(probedisk -extended-usb -card-as-usbflash -plus-size -hr | grep usbflash)
	if [ -z "$FDS" ] ; then
		yad --title=Bootflash --window-icon=dialog-error --image=dialog-error --text="$(gettext 'No USB drive plugged in')" --button=gtk-ok
		exit 1
	fi
	echo "$FDS" | sed 's|/dev/||' | \
	while read USBINFO
	do
		IFS="|" read -r ONEUSB USBTYPE USBINFO USBSIZE <<< "$USBINFO"
		if [ "$USBSIZE" = "0" -o "$USBSIZE" = "0B" ] ; then
			continue # /dev/sdd|usbdrv|Multi Flash Reader|0
		fi
		echo "$ONEUSB \"Flash memory, ${USBINFO}, ${USBSIZE}\""
	done > /tmp/xselections$$
	xSELECTIONS="`cat /tmp/xselections$$ | tr '\n' ' ' | tr -s ' '`"
	rm -f /tmp/xselections$$
	CHOOSEDLG="yad --title=\"$(gettext 'BootFlash: make USB drive bootable')\" --width=640 --height=240 --button=gtk-ok --text=\"$(gettext 'Choose which drive to format:')\" --list --no-headers --column=:TEXT --column=:TEXT --print-column=1 --separator= -- ${xSELECTIONS}"
	DRVSEL="`eval "$CHOOSEDLG"`"
	[ $? -ne 0 ] && exit 1
	USBDRV="$DRVSEL"
fi


#======================================================================
#                             FUNCTIONS
#======================================================================

# $1: device
# $2: boot partition
# $3: save partitoin
# $4: fileystem (ext4 or f2fs)
# $5: partition table type (msdos or gpt)
# $6: boot flag (boot or esp)
create_drv() {
	local XDEV=${1}
	local PBOOTPART=${2}
	local PSAVEPART=${3}
	local XFSTYPE2=${4}
	local LABEL=${5}
	local BOOTFLAG=${6}

	#-- wipe_existing_partition_table_and_filesystem_signatures
	dd if=/dev/zero of=/dev/${XDEV} bs=1M count=10

	# -- create_target_partition_table
	# parted
	parted --script -- \
		/dev/${XDEV} \
		mklabel ${LABEL} \
		mkpart primary fat32 4MiB 60MiB \
		mkpart primary ext4 100MiB 100% \
		set 1 ${BOOTFLAG} on

	sync
	blockdev --rereadpt /dev/${XDEV}

	mkfs.fat -F 32 /dev/${PBOOTPART}

	case "$XFSTYPE2" in
		f2fs) mkfs.f2fs -f /dev/${PSAVEPART} ;;
		ext4) mkfs.ext4 -F -m 0 -O ^has_journal /dev/${PSAVEPART} ;;
	esac
	sync

	blockdev --rereadpt /dev/${XDEV}
}

# efilinux - make bootable
# $1: targetdir 
# $2: pdrv
copy_efilinux_uefi_boot() {
	local HOMEDIR="$1"
	local PDRV="$2"

	mkdir -p ${HOMEDIR}/EFI/boot
	cp -f /usr/lib/efilinux/efilinux.efi ${HOMEDIR}/EFI/boot/bootx64.efi

	INITRD="initrd=\initrd.zst"
	[ -f ${SRCPATH}/ucode.cpio ] && INITRD="initrd=\ucode.cpio ${INITRD}"

	APPEND="pfix=fsck pmedia=usbflash"
	UUID=$(blkid -o export ${PDRV} | grep ^UUID= | cut -f 2 -d =)
	[ "$UUID" ] && APPEND="${APPEND} pupsfs=${UUID} psave=${UUID}"

	echo "-f \vmlinuz ${INITRD} ${APPEND}" > ${HOMEDIR}/EFI/boot/efilinux.cfg

	sync
}

# syslinux - make bootable
# $1: targetdir 
# $2: pdrv
create_syslinux_conf() {
	local HOMEDIR="$1"
	local PDRV="$2"

	INITRD="initrd.zst"
	[ -f ${SRCPATH}/ucode.cpio ] && INITRD="ucode.cpio,${INITRD}"

	APPEND="pfix=fsck pmedia=usbflash"
	UUID=$(blkid -o export ${PDRV} | grep ^UUID= | cut -f 2 -d =)
	[ "$UUID" ] && APPEND="${APPEND} pupsfs=${UUID} psave=${UUID}"

	cat << EOF > ${HOMEDIR}/syslinux.cfg
DEFAULT puppy

LABEL puppy
	LINUX vmlinuz
	INITRD ${INITRD}
	APPEND ${APPEND}
EOF

	sync
}

#--

locate_puppy_src_files() { # set $SRCPATH
	ASK=""
	#-----
	[ -n "${SRCPATH}" -a -f ${SRCPATH}/${DISTRO_PUPPYSFS} -a -f ${SRCPATH}/vmlinuz -a -f ${SRCPATH}/initrd.zst ] && return

	PDEV1_MP=/initrd/mnt/dev_save
	if [ -f ${PDEV1_MP}${PSUBDIR}/${DISTRO_PUPPYSFS} -a -f ${PDEV1_MP}${PSUBDIR}/vmlinuz -a -f ${PDEV1_MP}${PSUBDIR}/initrd.zst ] ; then
		SRCPATH=${PDEV1_MP}${PSUBDIR}
	else
		ASK=1 #last resort..
	fi
	#-----
	if [ "$ASK" ] ; then
		[ -z "$WAYLAND_DISPLAY" -a -z "$DISPLAY" ] && exit 1

		CHOICE=$(yad --title="Puppy Directory" --file --directory --text="$(gettext "Please select a directory containing $DISTRO_NAME $DISTRO_VERSION ")")
		[ $? -ne 0 ] && exit 1
		#--
		if [ -f ${CHOICE}${PSUBDIR}/${DISTRO_PUPPYSFS} ] ; then
			SRCPATH=${CHOICE}${PSUBDIR}
		elif [ -f ${CHOICE}/${DISTRO_PUPPYSFS} ] ; then
			SRCPATH=${CHOICE}
		fi
		#--
	fi
	#===============================
	#sanity check...
	if [ ! -f ${SRCPATH}/${DISTRO_PUPPYSFS} -o ! -f ${SRCPATH}/vmlinuz -o ! -f ${SRCPATH}/initrd.zst ];then #v3.01 v424 100913
		yad \
			--title="$(gettext 'ERROR')" --button=gtk-ok --text="`eval_gettext \"Oh dear, a 'sanity check' has failed.
This file: \\\$SRCPATH/\\\${DISTRO_PUPPYSFS} does not exist.
The above is supposed to be path-to-where-puppy-files-are/\\\${DISTRO_PUPPYSFS}.
nClick OK button to quit...\"`"
		exit 1
	fi
} #end locate_puppy_src_files function.

#=================================================================
#                     MAIN DIALOG
#=================================================================

if [ -z "$BOOTLOADER" -o -z "$FSTYPE2" ] ; then
	[ -z "$WAYLAND_DISPLAY" -a -z "$DISPLAY" ] && exit 1

	RETVAL="`yad --title="Bootflash $USBDRV" --window-icon=gtk-preferences --button=gtk-ok --text="$(gettext 'This tool allows to quickly create a bootable usb drive ready to use. Be aware that ALL DATA ON THE USB DRIVE WILL BE LOST')" --width=640 --list --no-headers --column=:NUM --column=:TEXT --hide-column=1 --print-column=1 --separator= -- 1 "$(gettext 'Create UEFI bootable USB (efilinux + ext4)')" 2 "$(gettext 'Create UEFI bootable USB (efilinux + f2fs)')" 3 "$(gettext 'Create BIOS bootable USB (syslinux + ext4)')" 4 "$(gettext 'Create BIOS bootable USB (syslinux + f2fs)')"`"

	BOOTLOADER=efilinux
	FSTYPE2=ext4
	case "$RETVAL" in
		1)
			;;
		2)
			FSTYPE2='f2fs' ;;
		3)
			BOOTLOADER=syslinux ;;
		4)
			BOOTLOADER=syslinux
			FSTYPE2='f2fs' ;;
		*)
			exit 1 ;;
	esac
fi

#reconfirm correct drv choice...
if [ -z "$1" -o -z "$2" -o -z "$3" ]; then
	[ -z "$WAYLAND_DISPLAY" -a -z "$DISPLAY" ] && exit 1
	MYSELECTION="`echo "$xSELECTIONS" | grep "^${USBDRV} " | tr '"' ' ' | tr -s ' '`" #'geany
	yad --image=dialog-question --title=BootFlash --window-icon=dialog-warning \
		--button=gtk-ok \
		--button=gtk-cancel \
		--text="$(gettext 'Please reconfirm that this is the USB drive that you want to format:')
	<b>${MYSELECTION}</b>
`gettext "Please also reconfirm that you want to use BootFlash to reformat the drive (and install Puppy)."`
`gettext "Click 'OK' to continue, 'Cancel' to quit:"`"
		[ $? -ne 0 ] && exit 1
fi

#======================================================================
#            DRIVE PARTITIONING / INSTALLATION
#======================================================================
case "${USBDRV}" in
	sd*)
		PBOOTPART=${USBDRV}1
		PSAVEPART=${USBDRV}2
		;;
	*)
		PBOOTPART=${USBDRV}p1
		PSAVEPART=${USBDRV}p2
		;;
esac

X1PID=0
if [ -n "$WAYLAND_DISPLAY" -o -n "$DISPLAY" ] ; then
	yad --image=system-run --layer=overlay --edge=top --text="$(printf "$(gettext 'Please wait, formatting %s drive...')" "${USBDRV}")" --no-buttons &
	X1PID=$!
fi

if [ "$BOOTLOADER" = "syslinux" ] ; then
	create_drv ${USBDRV} ${PBOOTPART} ${PSAVEPART} ${FSTYPE2} msdos boot
	dd if=/usr/lib/SYSLINUX/mbr.bin of=/dev/${USBDRV##*/}
elif [ "$BOOTLOADER" = "efilinux" ] ; then
	create_drv ${USBDRV} ${PBOOTPART} ${PSAVEPART} ${FSTYPE2} gpt esp
else
	exit 1
fi

[ $X1PID -gt 0 ] && kill $X1PID

locate_puppy_src_files

#-----------------------------------------------------------------------

mkdir -p /mnt/${PBOOTPART} /mnt/${PSAVEPART}
mount -t vfat /dev/${PBOOTPART} /mnt/${PBOOTPART}

if [ $? -ne 0 ];then
	[ -n "$WAYLAND_DISPLAY" -o -n "$DISPLAY" ] && yad --title=Bootflash --window-icon=dialog-error --image=dialog-error --text="$(gettext 'Error mounting USB drive')" --button=gtk-ok
	exit 1
fi

if [ -n "$WAYLAND_DISPLAY" -o -n "$DISPLAY" ] ; then
	yad --image=system-run --layer=overlay --edge=top --text="$(gettext 'Please wait, copying files...')" --no-buttons &
	X1PID=$!
fi

if [ "$BOOTLOADER" = "syslinux" ] ; then
	syslinux /dev/${PBOOTPART}
	create_syslinux_conf /mnt/${PBOOTPART} /dev/${PSAVEPART}
elif [ "$BOOTLOADER" = "efilinux" ] ; then
	copy_efilinux_uefi_boot /mnt/${PBOOTPART} /dev/${PSAVEPART}
fi

FILES2COPY="vmlinuz
initrd.zst
ucode.cpio
${DISTRO_PUPPYSFS}
${DISTRO_ZDRVSFS}
${DISTRO_FDRVSFS}
${DISTRO_ADRVSFS}
${DISTRO_YDRVSFS}
${DISTRO_BDRVSFS}
kbuild-`uname -r`.sfs
devx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs
docx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs
nlsx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"

#-------------------------
mount -t $FSTYPE2 /dev/${PSAVEPART} /mnt/${PSAVEPART}
if [ $? -ne 0 ];then
	[ -n "$WAYLAND_DISPLAY" -o -n "$DISPLAY" ] && yad --title=Bootflash --window-icon=dialog-error --image=dialog-error --text="$(gettext 'Error mounting USB drive')" --button=gtk-ok
	exit 1
fi
mkdir -p /mnt/${PSAVEPART}/${DISTRO_FILE_PREFIX}save
#-
cp -fv ${SRCPATH}/vmlinuz /mnt/${PBOOTPART}/
cp -fv ${SRCPATH}/initrd.zst /mnt/${PBOOTPART}/
[ -f ${SRCPATH}/ucode.cpio ] && cp -fv ${SRCPATH}/ucode.cpio /mnt/${PBOOTPART}/
#-------------------------

for i in ${FILES2COPY} ; do
	if [ -f ${SRCPATH}/${i} ] ; then
		cp -fv ${SRCPATH}/${i} /mnt/${PSAVEPART}/
	fi
done

sync

umount -l /mnt/${PBOOTPART}
umount -l /mnt/${PSAVEPART}
[ $X1PID -gt 0 ] && kill $X1PID

[ -z "$WAYLAND_DISPLAY" -a -z "$DISPLAY" ] && exit 0

yad --title="$(gettext 'BootFlash: Puppy installed')" --window-icon=dialog-information --image=dialog-information --button=gtk-ok \
--text="<b>$(gettext 'Puppy installed!')</b>
<b>$(gettext 'USB drive now (hopefully) bootable!')</b>
$(gettext 'The desktop drive icons should have been updated, so you can click on them to check that everything looks right. Then reboot and find out for sure...')"

### END ###
