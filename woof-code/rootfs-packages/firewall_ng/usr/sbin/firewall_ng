#!/bin/bash

#uses bashisms

# A very simple firewall based on Alienbob's script
# at http://www.slackware.com/~alien/efg/
CONFDIR="$HOME/.config/firewall"
export CONF="$CONFDIR/fw.conf"
version=0.8

# gettext : only the GUI
export TEXTDOMAIN=firewall_ng
export OUTPUT_CHARSET=UTF-8

# error splash
error_cond() {
	if [ -z "$2" ]; then
		yad --image=dialog-error --layer=overlay --edge=top --text="$1" --no-buttons --timeout=2
	else
		yad --image=dialog-information --layer=overlay --edge=top --text="$1" --no-buttons --timeout=2
	fi
	exit
}

# custom settings
export FILE=/tmp/firewall_extras
[ -f "$FILE" ] && rm $FILE

# add entry to firewall
mk_entry() {
	PORT=$1
	PROTO=$2
	IPRANGE=$3
	echo -e "iptables -I INPUT -p $PROTO -s $IPRANGE --destination-port $PORT -j ACCEPT" \
		>> $FILE
}

# parse input from extras gui
add_extras() {
	if echo $1|grep -q ',';then
		IFS=',' read -r a1 a2 a3 a4 a5 <<< "$1"
		echo $a1|grep -q '[a-zA-Z\!@\$%\^\&\*\(\)_+\-\=\.]' && \
			error_cond "$(gettext "Error: illegal characters! Must be a port number.")"
		case $a2 in
			TCP|UDP): ;;
			*)error_cond "$(gettext "Error: 2nd arg must be 'TCP' or 'UDP'.")" ;;
		esac
		echo "# Custom entry for port $a1" >> $FILE
		if [ -n "$a3" ];then
			case $a3 in
				TCP|UDP): ;;
				[1-9]*[0-9])echo ;;
				*)error_cond \
				"$(gettext "Error: 3rd arg must be 'TCP', 'UDP' or an IP or range.")" ;;
			esac
		fi
		[ -n "$a4" ] && echo $a4|grep -q '[a-zA-Z\!@\$%\^\&\*\(\)_+\-\=]' && \
			error_cond "$(gettext "Error: illegal characters! Must be an IP or range.")"
		[ -z "$a3" -o -z "$a4" ] && IP=0/0
		[ -n "$a3" ] && echo $a3 | grep '^[1-9]' | grep -q '[0-9]$' && IP=$a3
		[ -n "$a4" ] && echo $a4 | grep '^[1-9]' | grep -q '[0-9]$' && IP=$a4
		if [ -z "$a3" ];then
			mk_entry $a1 $a2 0/0
		elif [ -n "$a3" -a -z "$a4" ];then
			#sort out if a3 is a proto or IP
			case $a3 in
			TCP|UDP)
				mk_entry $a1 $a2 0/0
				mk_entry $a1 $a3 0/0
				;;
			*)
				mk_entry $a1 $a2 $a3 #a3 must be IP		
			;;
			esac
		else
			#full house
			mk_entry $a1 $a2 $a4 #a4 must be IP
			mk_entry $a1 $a3 $a4 #a4 must be IP
		fi
	else
		echo $1|grep -q '[a-zA-Z\!@\$%\^\&\*\(\)_+\-\=\.]' && \
			error_cond "$(gettext "Error: illegal characters! Must be a port number.")"
		echo "# Custom entry for port $1" >> $FILE
		mk_entry $1 UDP "0/0"
		mk_entry $1 TCP "0/0"
	fi
}

process_ports() {
	read -a name <<< "$1"
	for ((z=0; z<10; z++));do
		[ -z "${name[z]}" ] && break
		add_extras ${name[z]}
	done

}

# setup
[ -d "$CONFDIR" ] || mkdir -p "$CONFDIR"
if [ -f "$CONF" ];then
	. "$CONF"
	CB_MAINTXT="$(gettext "Your firewall is configured. Change it to open ports if you have added extra services.")"
else
	CB_MAINTXT="$(gettext "The default setting is that all ports are blocked. Uncheck to allow you to check some ports.")"
	LOGGING=false
	MAIN=false
	CONFIG_SSH=false
	CONFIG_CUPS=false
	CONFIG_SAMBA=false
	CONFIG_SAMBA_CLIENT=false
	CONFIG_DLNA=false
	CONFIG_NTP=false
	CONFIG_FTP=false
	CONFIG_HTTP=false
	CONFIG_DNS=false
	CONFIG_DHCP=false
	CONFIG_NFS=false
	CONFIG_EXTRAS=""
fi

if [ "$1" = "enable" ]; then
	echo "Enabling firewall"
	RETVALS="true|false|||false|false|false|false|false|false|false|false|false|false|false||||"
	EXIT=0
else
	RETVALS="$(yad \
		--title="Firewall Setup $version" \
		--width=640 \
		--height=320 \
		--form \
		--scroll \
		--field="$CB_MAINTXT":CHK $MAIN \
		--field="$(gettext 'Check this box to enable logging.')":CHK $LOGGING \
		--field=:LBL "" \
		--field="<b>$(gettext 'Choose which connections to allow through your firewall.')</b>
$(gettext 'Check your required remote connections or leave the default.')":LBL "" \
		--field="SSH - $(gettext 'Remote secure shell access')":CHK $CONFIG_SSH \
		--field="CUPS - $(gettext 'Printer server')":CHK $CONFIG_CUPS \
		--field="Samba - $(gettext 'Share files with Windows')":CHK $CONFIG_SAMBA \
		--field="Samba Client - $(gettext 'Browse files with Windows')":CHK $CONFIG_SAMBA_CLIENT \
		--field="DLNA - $(gettext 'Media Server')":CHK $CONFIG_DLNA \
		--field="NTP - $(gettext 'Time Server')":CHK $CONFIG_NTP \
		--field="FTP - $(gettext 'File transfer protocol')":CHK $CONFIG_FTP \
		--field="HTTP - $(gettext 'Web Server')":CHK $CONFIG_HTTP \
		--field="DNS - $(gettext 'Domain Name Services')":CHK $CONFIG_DNS \
		--field="DHCP - $(gettext 'DHCP Server')":CHK $CONFIG_DHCP \
		--field="NFS - $(gettext 'Network File Sharing Protocol (UNIX)')":CHK $CONFIG_NFS \
		--field=:LBL "" \
		--field="$(gettext 'Place a space delimited array of ports and options in the box below. Up to 10 can be specified. You must comma delimit the options.
Specifying the port number only allows inbound TCP and UDP traffic from any source.')
$(gettext 'Example:')
51200,TCP
$(gettext 'Or:')
5100,TCP,UDP,192.168.1.0/16":LBL "" \
		--field=:CE "^$CONFIG_EXTRAS" \
		--button=gtk-apply \
		--button=gtk-cancel \
		--bool-fmt=t)"
	EXIT=$?
fi
case "$EXIT" in
	0)IFS='|' read -r MAIN LOGGING _ _ CONFIG_SSH CONFIG_CUPS CONFIG_SAMBA CONFIG_SAMBA_CLIENT CONFIG_DLNA CONFIG_NTP CONFIG_FTP CONFIG_HTTP CONFIG_DNS CONFIG_DHCP CONFIG_NFS _ _ CONFIG_EXTRAS _ <<< "$RETVALS"
	echo "LOGGING=$LOGGING
MAIN=$MAIN
CONFIG_SSH=$CONFIG_SSH
CONFIG_CUPS=$CONFIG_CUPS
CONFIG_SAMBA=$CONFIG_SAMBA
CONFIG_SAMBA_CLIENT=$CONFIG_SAMBA_CLIENT
CONFIG_DLNA=$CONFIG_DLNA
CONFIG_NTP=$CONFIG_NTP
CONFIG_FTP=$CONFIG_FTP
CONFIG_HTTP=$CONFIG_HTTP
CONFIG_DNS=$CONFIG_DNS
CONFIG_DHCP=$CONFIG_DHCP
CONFIG_NFS=$CONFIG_NFS
CONFIG_EXTRAS=\"$CONFIG_EXTRAS\"" > $CONF # (re)write config
	process_ports "$CONFIG_EXTRAS"
	;;
	*)echo 'aborting' && exit
	;;
esac

# build the firewall
TMPFW=/tmp/firewall_gen$$
cat > $TMPFW << EOF_FWSTART
#!/bin/sh
#
# Generated iptables firewall script for the Linux 2.4 kernel and later.
# Script generated by Easy Firewall Generator for IPTables 1.15
# copyright 2002 Timothy Scott Morizot
# Modified for Slackware Linux by Eric Hameleers <alien@slackware.com>
# 
# This generator is adapted from the original to work on Slackware Linux.
# Basically, I corrected the path name to the iptables* commands
# and re-wrote this comment.
#
# It can be executed with the typical start and stop arguments.
# If used with stop, it will stop after flushing the firewall.
# The save and restore arguments will save or restore the rules
# from the /etc/sysconfig/iptables file.  The save and restore
# arguments are included to preserve compatibility with
# Redhat's or Fedora's init.d script if you prefer to use it.

# You may want to save this script as /etc/rc.d/rc.firewall
# and make it executable, like this:
#   chmod +x /etc/rc.d/rc.firewall
# Slackware Linux will then automatically run this script
# with the "start" parameter.


# Modified for Puppy Linux by Michael Amadio <01micko@gmail.com> 2015

# update the tray icon when done
trap "killall -42 waybar 2>/dev/null" EXIT

###############################################################################
# 
# Local Settings
#
EOF_FWSTART

# logging
echo '
# logging' >> $TMPFW
echo "LOGGING=$LOGGING" >> $TMPFW

cat >> $TMPFW << EOF_FWNEXT

###############################################################################
#
# Flush Any Existing Rules or Chains
#

echo "Flushing Tables ..."

# Reset Default Policies
iptables -P OUTPUT ACCEPT
ip6tables -P OUTPUT ACCEPT

# Flush all rules
iptables -F
ip6tables -F

# Erase all non-default chains
iptables -X
ip6tables -X

if [ "\$1" = "stop" ]
then
	iptables -P INPUT ACCEPT
	ip6tables -P INPUT ACCEPT

	echo "Firewall completely flushed!  Now running with no firewall."
	exit 0
fi

iptables -P INPUT DROP
ip6tables -P INPUT DROP

###############################################################################
#
# Rules Configuration
#

# By default, however, drop pings without logging. Blaster
# and other worms have infected systems blasting pings.
# Comment the line below if you want pings logged, but it
# will likely fill your logs.
if [ "\$LOGGING" = "true" ];then
	iptables -A INPUT -p ICMP -s 0/0 --icmp-type 8 -j DROP
	ip6tables -A INPUT -p ICMPV6 --icmpv6-type 128 -j DROP
fi

# Time Exceeded
iptables -A INPUT -p ICMP -s 0/0 --icmp-type 11 -j ACCEPT
ip6tables -A INPUT -p ICMPV6 --icmpv6-type 3 -j ACCEPT

# Neighbour Discovery
ip6tables -A INPUT -p ICMPV6 -s fe80::/10 -j ACCEPT

# Dynamic Address
# If DHCP, the initial request is a broadcast. The response
# doesn't exactly match the outbound packet.  This explicitly
# allow the DHCP ports to alleviate this problem.
# If you receive your dynamic address by a different means, you
# can probably comment this line.
iptables -A INPUT -p UDP -s 0/0 --source-port 67 --destination-port 68 \
-j ACCEPT
ip6tables -A INPUT -p UDP -d fe80::/64 --destination-port 546 -m conntrack --ctstate NEW \
-j ACCEPT || \
ip6tables -A INPUT -p UDP -d fe80::/64 --destination-port 546 -m state --state NEW \
-j ACCEPT
EOF_FWNEXT

if [ "$CONFIG_SAMBA" == "true" ];then
	cat >> $TMPFW << EOF_SAMBA_UDP
	
# allow netbios name resolution for Samba server
iptables -I INPUT -p UDP --destination-port 137 -j ACCEPT
iptables -I INPUT -p UDP --destination-port 138 -j ACCEPT
EOF_SAMBA_UDP
fi
if [ "$CONFIG_SAMBA_CLIENT" == "true" ];then
	cat >> $TMPFW << EOF_SAMBA_UDP_CL
	
# allow netbios name resolution for Samba client
iptables -I INPUT -p UDP --source-port 137 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT || \
iptables -I INPUT -p UDP --source-port 137 -m state --state NEW,ESTABLISHED -j ACCEPT

iptables -I INPUT -p UDP --source-port 138 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT || \
iptables -I INPUT -p UDP --source-port 138 -m state --state NEW,ESTABLISHED -j ACCEPT

iptables -I INPUT -p TCP --source-port 139 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT || \
iptables -I INPUT -p TCP --source-port 139 -m state --state NEW,ESTABLISHED -j ACCEPT

iptables -I INPUT -p TCP --source-port 445 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT || \
iptables -I INPUT -p TCP --source-port 445 -m state --state NEW,ESTABLISHED -j ACCEPT
EOF_SAMBA_UDP_CL
fi
if [ "$CONFIG_CUPS" == "true" ];then
	cat >> $TMPFW << EOF_CUPS_UDP

# allow CUPS printing to this server - requires CUPS to be shared
iptables -I INPUT -p UDP -s 0/0 --destination-port 631 -j ACCEPT
EOF_CUPS_UDP
fi

if [ "$CONFIG_NTP" == "true" ];then
	cat >> $TMPFW << EOF_NTP

# Network Time Protocol (NTP) Server
iptables -I INPUT -p UDP -s 0/0 --destination-port 123 -j ACCEPT
EOF_NTP
fi

if [ "$CONFIG_DNS" == "true" ];then
	cat >> $TMPFW << EOF_DNS

# DNS Server
# Configure the server to use port 53 as the source port for requests
# Note, if you run a caching-only name server that only accepts queries
# from the private network or localhost, you can comment out this line.
iptables -I INPUT -p UDP -s 0/0 --destination-port 53 -j ACCEPT

# # If you don't query-source the server to port 53 and you have problems,
# uncomment this rule.  It specifically allows responses to queries
# initiated to another server from a high UDP port.  The stateful
# connection rules should handle this situation, though.
# iptables -I INPUT -p UDP -s 0/0 --source-port 53 -j ACCEPT

# mDNSResponder
#iptables -I INPUT -p UDP -s 0/0 --destination-port 5353 -j ACCEPT
EOF_DNS
fi

if [ "$CONFIG_DHCP" == "true" ];then
	cat >> $TMPFW << EOF_DHCP

# External DHCP Server
# Allow DHCP client request packets inbound from external network
iptables -I INPUT -p UDP -s 0/0 --source-port 68 --destination-port 67 \
-j ACCEPT

# Dynamic Address
# If DHCP, the initial request is a broadcast. The response
# doesn't exactly match the outbound packet.  This explicitly
# allow the DHCP ports to alleviate this problem.
# If you receive your dynamic address by a different means, you
# can probably comment this line.
iptables -I INPUT -p UDP -s 0/0 --source-port 67 --destination-port 68 \
-j ACCEPT
EOF_DHCP
fi

if [ "$CONFIG_NFS" == "true" ];then
	cat >> $TMPFW << EOF_NFS

# Network File System (NFS) Server
# Please note that additional services must
# be configured in order to support an NFS Server through
# the firewall. Read the help in the generator or this site:
# http://www.lowth.com/LinWiz/nfs_help.html

# NFS Server - portmapper
iptables -I INPUT -p UDP -s 0/0 --destination-port 111 -j ACCEPT

# NFS Server - statd
iptables -I INPUT -p UDP -s 0/0 --destination-port 9400 -j ACCEPT

# NFS Server - NFS daemon
iptables -I INPUT -p UDP -s 0/0 --destination-port 2049 -j ACCEPT

# NFS Server - lockd
iptables -I INPUT -p UDP -s 0/0 --destination-port 9401 -j ACCEPT

# NFS Server - mountd
iptables -I INPUT -p UDP -s 0/0 --destination-port 9402 -j ACCEPT

# NFS Server - quotad
iptables -I INPUT -p UDP -s 0/0 --destination-port 9403 -j ACCEPT
EOF_NFS
fi
cat >> $TMPFW << EOF_MID

EOF_MID
if [ "$CONFIG_HTTP" == "true" ];then
	cat >> $TMPFW << EOF_HTTP
	
# Web Server

# HTTP
iptables -I INPUT -p TCP -s 0/0 --destination-port 80 -j ACCEPT
EOF_HTTP
fi
if [ "$CONFIG_FTP" == "true" ];then
	cat >> $TMPFW << EOF_FTP
	
# FTP Server (Control)
iptables -I INPUT -p TCP -s 0/0 --destination-port 21 -j ACCEPT

# FTP Client (Data Port for non-PASV transfers)
iptables -I INPUT -p TCP -s 0/0 --source-port 20 -j ACCEPT
EOF_FTP
fi
if [ "$CONFIG_SSH" == "true" ];then
	cat >> $TMPFW << EOF_SSH

# sshd
iptables -I INPUT -p TCP -s 0/0 --destination-port 22 -j ACCEPT
EOF_SSH
fi
if [ "$CONFIG_SAMBA" == "true" ];then
	cat >> $TMPFW << EOF_SAMBA_TCP
	
# allow Samba TCP communication
iptables -I INPUT -p TCP --destination-port 139 -j ACCEPT
iptables -I INPUT -p TCP --destination-port 445 -j ACCEPT
EOF_SAMBA_TCP
fi
if [ "$CONFIG_CUPS" == "true" ];then
	cat >> $TMPFW << EOF_CUPS_TCP

# allow CUPS ipp printing to this server - requires CUPS to be shared
iptables -I INPUT -p TCP -s 0/0 --destination-port 631 -j ACCEPT
EOF_CUPS_TCP
fi

if [ "$CONFIG_DLNA" == "true" ];then
	cat >> $TMPFW << EOF_CUPS_DLNA

# allow dlna multimedia server
iptables -I INPUT -p TCP -s 0/0 --destination-port 8200 -j ACCEPT
EOF_CUPS_DLNA
fi

# custom extras
[ -f "$FILE" ] && echo "
############################### Custom Extras #################################
" >> $TMPFW
[ -f "$FILE" ] && cat $FILE >> $TMPFW
[ -f "$FILE" ] && echo "
############################## END Custom Extras ##############################
" >> $TMPFW

# The rest!

cat >> $TMPFW << EOF_REST

###############################################################################
#
# INPUT Chain
#

echo "Process INPUT chain ..."

# Allow all on localhost interface
iptables -A INPUT -p ALL -i lo -j ACCEPT
ip6tables -A INPUT -p ALL -i lo -j ACCEPT

# Accept Established Connections
iptables -A INPUT -p ALL -m conntrack --ctstate ESTABLISHED,RELATED \
-j ACCEPT
ip6tables -A INPUT -p ALL -m conntrack --ctstate ESTABLISHED,RELATED \
-j ACCEPT

# Log packets that still don't match
if [ "\$LOGGING" = "true" ];then
	iptables -A INPUT -m limit --limit 3/minute --limit-burst 3 -j LOG \
--log-prefix "INPUT packet died: "
	ip6tables -A INPUT -m limit --limit 3/minute --limit-burst 3 -j LOG \
--log-prefix "INPUT packet died: "
fi
EOF_REST

if [ -f "$TMPFW" ];then
	[ "$1" != "enable" ] && sh /etc/init.d/rc.firewall stop && sleep 1
	echo "copying firewall"
	cp -af "$TMPFW" /etc/init.d/rc.firewall
	[ "$MAIN" = "true" -o "$CONFIG_SSH" = "true" -o "$CONFIG_CUPS" = "true" -o "$CONFIG_SAMBA" = "true" -o "$CONFIG_SAMBA_CLIENT" = "true" -o "$CONFIG_DLNA" = "true" -o "$CONFIG_NTP" = "true" -o "$CONFIG_FTP" = "true" -o "$CONFIG_HTTP" = "true" -o "$CONFIG_DNS" = "true" -o "$CONFIG_DHCP" = "true" -o "$CONFIG_NFS" = "true" ] && chmod 755 /etc/init.d/rc.firewall || chmod 644 /etc/init.d/rc.firewall
	rm -f "$TMPFW"
else
	echo "Something went wrong"
	exit
fi

[ "$1" = "enable" ] && exit
[ "$MAIN" = "false" -a "$CONFIG_SSH" = "false" -a "$CONFIG_CUPS" = "false" -a "$CONFIG_SAMBA" = "false" -a "$CONFIG_SAMBA_CLIENT" = "false" -a "$CONFIG_DLNA" = "false" -a "$CONFIG_NTP" = "false" -a "$CONFIG_FTP" = "false" -a "$CONFIG_HTTP" = "false" -a "$CONFIG_DNS" = "false" -a "$CONFIG_DHCP" = "false" -a "$CONFIG_NFS" = "false" ] && exit

# run it!
yad --image=system-run --layer=overlay --edge=top --text="Starting firewall" --no-buttons --timeout=2 &
urxvt -bg yellow -fg black -geometry 60X10+1+1 --hold -e /etc/init.d/rc.firewall start &
p=$!
sleep 6
kill -9 $p 2>/dev/null

# end
