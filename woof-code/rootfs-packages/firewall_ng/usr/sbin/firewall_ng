#!/bin/bash

#uses bashisms

# A very simple firewall based on Alienbob's script
# at http://www.slackware.com/~alien/efg/
CONFDIR="$HOME/.config/firewall"
export CONF="$CONFDIR/fw.conf"
version=0.8

# gettext : only the GUI
export TEXTDOMAIN=firewall_ng
export OUTPUT_CHARSET=UTF-8

# error splash
error_cond() {
	if [ -z "$2" ]; then
		yad --image=dialog-error --layer=overlay --edge=top --text="$1" --no-buttons --timeout=2
	else
		yad --image=dialog-information --layer=overlay --edge=top --text="$1" --no-buttons --timeout=2
	fi
	exit
}

# custom settings
export FILE=/tmp/firewall_extras
[ -f "$FILE" ] && rm $FILE

# add entry to firewall
mk_entry() {
	PORT=$1
	PROTO=$2
	IPRANGE=$3
	echo -e "nft 'insert rule inet filter firewall_ng ip saddr $IPRANGE ${PROTO,,} dport $PORT counter accept'" >> $FILE
}

# parse input from extras gui
add_extras() {
	if echo $1|grep -q ',';then
		IFS=',' read -r a1 a2 a3 a4 a5 <<< "$1"
		echo $a1|grep -q '[a-zA-Z\!@\$%\^\&\*\(\)_+\-\=\.]' && \
			error_cond "$(gettext "Error: illegal characters! Must be a port number.")"
		case $a2 in
			TCP|UDP): ;;
			*)error_cond "$(gettext "Error: 2nd arg must be 'TCP' or 'UDP'.")" ;;
		esac
		echo "# Custom entry for port $a1" >> $FILE
		if [ -n "$a3" ];then
			case $a3 in
				TCP|UDP): ;;
				[1-9]*[0-9])echo ;;
				*)error_cond \
				"$(gettext "Error: 3rd arg must be 'TCP', 'UDP' or an IP or range.")" ;;
			esac
		fi
		[ -n "$a4" ] && echo $a4|grep -q '[a-zA-Z\!@\$%\^\&\*\(\)_+\-\=]' && \
			error_cond "$(gettext "Error: illegal characters! Must be an IP or range.")"
		[ -z "$a3" -o -z "$a4" ] && IP=0/0
		[ -n "$a3" ] && echo $a3 | grep '^[1-9]' | grep -q '[0-9]$' && IP=$a3
		[ -n "$a4" ] && echo $a4 | grep '^[1-9]' | grep -q '[0-9]$' && IP=$a4
		if [ -z "$a3" ];then
			mk_entry $a1 $a2 0/0
		elif [ -n "$a3" -a -z "$a4" ];then
			#sort out if a3 is a proto or IP
			case $a3 in
			TCP|UDP)
				mk_entry $a1 $a2 0/0
				mk_entry $a1 $a3 0/0
				;;
			*)
				mk_entry $a1 $a2 $a3 #a3 must be IP		
			;;
			esac
		else
			#full house
			mk_entry $a1 $a2 $a4 #a4 must be IP
			mk_entry $a1 $a3 $a4 #a4 must be IP
		fi
	else
		echo $1|grep -q '[a-zA-Z\!@\$%\^\&\*\(\)_+\-\=\.]' && \
			error_cond "$(gettext "Error: illegal characters! Must be a port number.")"
		echo "# Custom entry for port $1" >> $FILE
		mk_entry $1 UDP "0/0"
		mk_entry $1 TCP "0/0"
	fi
}

process_ports() {
	read -a name <<< "$1"
	for ((z=0; z<10; z++));do
		[ -z "${name[z]}" ] && break
		add_extras ${name[z]}
	done

}

# setup
[ -d "$CONFDIR" ] || mkdir -p "$CONFDIR"
if [ -f "$CONF" ];then
	. "$CONF"
	CB_MAINTXT="$(gettext "Your firewall is configured. Change it to open ports if you have added extra services.")"
else
	CB_MAINTXT="$(gettext "The default setting is that all ports are blocked. Uncheck to allow you to check some ports.")"
	LOGGING=false
	MAIN=false
	CONFIG_SSH=false
	CONFIG_CUPS=false
	CONFIG_SAMBA=false
	CONFIG_DLNA=false
	CONFIG_NTP=false
	CONFIG_FTP=false
	CONFIG_HTTP=false
	CONFIG_DNS=false
	CONFIG_DHCP=false
	CONFIG_NFS=false
	CONFIG_EXTRAS=""
fi

if [ "$1" = "enable" ]; then
	echo "Enabling firewall"
	RETVALS="true|false|||false|false|false|false|false|false|false|false|false|false||||"
	EXIT=0
else
	RETVALS="$(yad \
		--title="Firewall Setup $version" \
		--width=640 \
		--height=320 \
		--form \
		--scroll \
		--field="$CB_MAINTXT":CHK $MAIN \
		--field="$(gettext 'Check this box to enable logging.')":CHK $LOGGING \
		--field=:LBL "" \
		--field="<b>$(gettext 'Choose which connections to allow through your firewall.')</b>
$(gettext 'Check your required remote connections or leave the default.')":LBL "" \
		--field="SSH - $(gettext 'Remote secure shell access')":CHK $CONFIG_SSH \
		--field="CUPS - $(gettext 'Printer server')":CHK $CONFIG_CUPS \
		--field="Samba - $(gettext 'Share files with Windows')":CHK $CONFIG_SAMBA \
		--field="DLNA - $(gettext 'Media Server')":CHK $CONFIG_DLNA \
		--field="NTP - $(gettext 'Time Server')":CHK $CONFIG_NTP \
		--field="FTP - $(gettext 'File transfer protocol')":CHK $CONFIG_FTP \
		--field="HTTP - $(gettext 'Web Server')":CHK $CONFIG_HTTP \
		--field="DNS - $(gettext 'Domain Name Services')":CHK $CONFIG_DNS \
		--field="DHCP - $(gettext 'DHCP Server')":CHK $CONFIG_DHCP \
		--field="NFS - $(gettext 'Network File Sharing Protocol (UNIX)')":CHK $CONFIG_NFS \
		--field=:LBL "" \
		--field="$(gettext 'Place a space delimited array of ports and options in the box below. Up to 10 can be specified. You must comma delimit the options.
Specifying the port number only allows inbound TCP and UDP traffic from any source.')
$(gettext 'Example:')
51200,TCP
$(gettext 'Or:')
5100,TCP,UDP,192.168.1.0/16":LBL "" \
		--field=:CE "^$CONFIG_EXTRAS" \
		--button=gtk-apply \
		--button=gtk-cancel \
		--bool-fmt=t)"
	EXIT=$?
fi
case "$EXIT" in
	0)IFS='|' read -r MAIN LOGGING _ _ CONFIG_SSH CONFIG_CUPS CONFIG_SAMBA CONFIG_DLNA CONFIG_NTP CONFIG_FTP CONFIG_HTTP CONFIG_DNS CONFIG_DHCP CONFIG_NFS _ _ CONFIG_EXTRAS _ <<< "$RETVALS"
	echo "LOGGING=$LOGGING
MAIN=$MAIN
CONFIG_SSH=$CONFIG_SSH
CONFIG_CUPS=$CONFIG_CUPS
CONFIG_SAMBA=$CONFIG_SAMBA
CONFIG_DLNA=$CONFIG_DLNA
CONFIG_NTP=$CONFIG_NTP
CONFIG_FTP=$CONFIG_FTP
CONFIG_HTTP=$CONFIG_HTTP
CONFIG_DNS=$CONFIG_DNS
CONFIG_DHCP=$CONFIG_DHCP
CONFIG_NFS=$CONFIG_NFS
CONFIG_EXTRAS=\"$CONFIG_EXTRAS\"" > $CONF # (re)write config
	process_ports "$CONFIG_EXTRAS"
	;;
	*)echo 'aborting' && exit
	;;
esac

# build the firewall
TMPFW=/tmp/firewall_gen$$
cat > $TMPFW << EOF_FWSTART
#!/bin/sh
#
# Generated iptables firewall script for the Linux 2.4 kernel and later.
# Script generated by Easy Firewall Generator for IPTables 1.15
# copyright 2002 Timothy Scott Morizot
# Modified for Slackware Linux by Eric Hameleers <alien@slackware.com>
# 
# This generator is adapted from the original to work on Slackware Linux.
# Basically, I corrected the path name to the iptables* commands
# and re-wrote this comment.
#
# It can be executed with the typical start and stop arguments.
# If used with stop, it will stop after flushing the firewall.
# The save and restore arguments will save or restore the rules
# from the /etc/sysconfig/iptables file.  The save and restore
# arguments are included to preserve compatibility with
# Redhat's or Fedora's init.d script if you prefer to use it.

# You may want to save this script as /etc/rc.d/rc.firewall
# and make it executable, like this:
#   chmod +x /etc/rc.d/rc.firewall
# Slackware Linux will then automatically run this script
# with the "start" parameter.


# Modified for Puppy Linux by Michael Amadio <01micko@gmail.com> 2015

# update the tray icon when done
trap "killall -42 waybar 2>/dev/null" EXIT

###############################################################################
# 
# Local Settings
#
EOF_FWSTART

# logging
echo '
# logging' >> $TMPFW
echo "LOGGING=$LOGGING" >> $TMPFW

cat >> $TMPFW << EOF_FWNEXT

###############################################################################
#
# Flush Any Existing Rules or Chains
#

echo "Flushing Tables ..."

nft 'flush ruleset'

if [ "\$1" = "stop" ]
then
	echo "Firewall completely flushed!  Now running with no firewall."
	exit 0
fi

nft 'add table inet filter'
nft 'add chain inet filter firewall_ng { type filter hook input priority 0 ; policy drop ; }'

###############################################################################
#
# Rules Configuration
#

# By default, however, drop pings without logging. Blaster
# and other worms have infected systems blasting pings.
# Comment the line below if you want pings logged, but it
# will likely fill your logs.
if [ "\$LOGGING" = "true" ];then
	nft 'add rule inet filter firewall_ng icmp type echo-request counter drop'
	nft 'add rule inet filter firewall_ng meta l4proto ipv6-icmp icmpv6 type echo-request counter drop'
fi

# Time Exceeded
nft 'add rule inet filter firewall_ng icmp type time-exceeded counter accept'
nft 'add rule inet filter firewall_ng meta l4proto ipv6-icmp icmpv6 type time-exceeded counter accept'

# Neighbour Discovery
nft 'add rule inet filter firewall_ng meta l4proto ipv6-icmp ip6 saddr fe80::/10 counter accept'

# Dynamic Address
# If DHCP, the initial request is a broadcast. The response
# doesn't exactly match the outbound packet.  This explicitly
# allow the DHCP ports to alleviate this problem.
# If you receive your dynamic address by a different means, you
# can probably comment this line.
nft 'add rule inet filter firewall_ng udp sport 67 udp dport 68 counter accept'
nft 'add rule inet filter firewall_ng ip6 daddr fe80::/64 udp dport 546 ct state new counter accept'
EOF_FWNEXT

if [ "$CONFIG_SAMBA" == "true" ];then
	cat >> $TMPFW << EOF_SAMBA_UDP
	
# allow netbios name resolution for Samba server
nft 'insert rule inet filter firewall_ng udp dport 137 counter accept'
nft 'insert rule inet filter firewall_ng udp dport 138 counter accept'
EOF_SAMBA_UDP
fi
if [ "$CONFIG_CUPS" == "true" ];then
	cat >> $TMPFW << EOF_CUPS_UDP

# allow CUPS printing to this server - requires CUPS to be shared
nft 'insert rule inet filter firewall_ng udp dport 631 counter accept'
EOF_CUPS_UDP
fi

if [ "$CONFIG_NTP" == "true" ];then
	cat >> $TMPFW << EOF_NTP

# Network Time Protocol (NTP) Server
nft 'insert rule inet filter firewall_ng udp dport 123 counter accept'
EOF_NTP
fi

if [ "$CONFIG_DNS" == "true" ];then
	cat >> $TMPFW << EOF_DNS

# DNS Server
nft 'insert rule inet filter firewall_ng udp dport 53 counter accept'
EOF_DNS
fi

if [ "$CONFIG_DHCP" == "true" ];then
	cat >> $TMPFW << EOF_DHCP

# External DHCP Server
# Allow DHCP client request packets inbound from external network
nft 'insert rule inet filter firewall_ng udp sport 68 udp dport 67 counter'

# Dynamic Address
# If DHCP, the initial request is a broadcast. The response
# doesn't exactly match the outbound packet.  This explicitly
# allow the DHCP ports to alleviate this problem.
# If you receive your dynamic address by a different means, you
# can probably comment this line.
nft 'insert rule inet filter firewall_ng udp sport 67 udp dport 68 counter accept'
EOF_DHCP
fi

if [ "$CONFIG_NFS" == "true" ];then
	cat >> $TMPFW << EOF_NFS

# Network File System (NFS) Server
# Please note that additional services must
# be configured in order to support an NFS Server through
# the firewall. Read the help in the generator or this site:
# http://www.lowth.com/LinWiz/nfs_help.html

# NFS Server - portmapper
nft 'insert rule inet filter firewall_ng udp dport 111 counter accept'

# NFS Server - statd
nft 'insert rule inet filter firewall_ng udp dport 9400 counter accept'

# NFS Server - NFS daemon
nft 'insert rule inet filter firewall_ng udp dport 2049 counter accept'

# NFS Server - lockd
nft 'insert rule inet filter firewall_ng udp dport 9041 counter accept'

# NFS Server - mountd
nft 'insert rule inet filter firewall_ng udp dport 9042 counter accept'

# NFS Server - quotad
nft 'insert rule inet filter firewall_ng udp dport 9043 counter accept'
EOF_NFS
fi
cat >> $TMPFW << EOF_MID

EOF_MID
if [ "$CONFIG_HTTP" == "true" ];then
	cat >> $TMPFW << EOF_HTTP
	
# Web Server

# HTTP
nft 'insert rule inet filter firewall_ng tcp dport 80 counter accept'
EOF_HTTP
fi
if [ "$CONFIG_FTP" == "true" ];then
	cat >> $TMPFW << EOF_FTP
	
# FTP Server (Control)
nft 'insert rule inet filter firewall_ng tcp dport 21 counter accept'

# FTP Client (Data Port for non-PASV transfers)
nft 'insert rule inet filter firewall_ng tcp dport 20 counter accept'
EOF_FTP
fi
if [ "$CONFIG_SSH" == "true" ];then
	cat >> $TMPFW << EOF_SSH

# sshd
nft 'insert rule inet filter firewall_ng tcp dport 22 counter accept'
EOF_SSH
fi
if [ "$CONFIG_SAMBA" == "true" ];then
	cat >> $TMPFW << EOF_SAMBA_TCP
	
# allow Samba TCP communication
nft 'insert rule inet filter firewall_ng tcp dport 139 counter accept'
nft 'insert rule inet filter firewall_ng tcp dport 445 counter accept'
EOF_SAMBA_TCP
fi
if [ "$CONFIG_CUPS" == "true" ];then
	cat >> $TMPFW << EOF_CUPS_TCP

# allow CUPS ipp printing to this server - requires CUPS to be shared
nft 'insert rule inet filter firewall_ng tcp dport 631 counter accept'
EOF_CUPS_TCP
fi

if [ "$CONFIG_DLNA" == "true" ];then
	cat >> $TMPFW << EOF_CUPS_DLNA

# allow dlna multimedia server
nft 'insert rule inet filter firewall_ng tcp dport 8200 counter accept'
EOF_CUPS_DLNA
fi

# custom extras
[ -f "$FILE" ] && echo "
############################### Custom Extras #################################
" >> $TMPFW
[ -f "$FILE" ] && cat $FILE >> $TMPFW
[ -f "$FILE" ] && echo "
############################## END Custom Extras ##############################
" >> $TMPFW

# The rest!

cat >> $TMPFW << EOF_REST

###############################################################################

echo "Setting firewall rules ..."

# Allow all on localhost interface
nft 'add rule inet filter firewall_ng iifname "lo" counter accept'

# Accept Established Connections
nft 'add rule inet filter firewall_ng ct state related,established counter accept'

# Log packets that still don't match
if [ "\$LOGGING" = "true" ];then
	nft 'add rule inet filter firewall_ng limit rate 3/minute burst 3 packets counter log prefix "input packet died: "'
fi
EOF_REST

if [ -f "$TMPFW" ];then
	[ "$1" != "enable" ] && sh /etc/init.d/rc.firewall stop && sleep 1
	echo "copying firewall"
	cp -af "$TMPFW" /etc/init.d/rc.firewall
	[ "$MAIN" = "true" -o "$CONFIG_SSH" = "true" -o "$CONFIG_CUPS" = "true" -o "$CONFIG_SAMBA" = "true" -o "$CONFIG_DLNA" = "true" -o "$CONFIG_NTP" = "true" -o "$CONFIG_FTP" = "true" -o "$CONFIG_HTTP" = "true" -o "$CONFIG_DNS" = "true" -o "$CONFIG_DHCP" = "true" -o "$CONFIG_NFS" = "true" ] && chmod 755 /etc/init.d/rc.firewall || chmod 644 /etc/init.d/rc.firewall
	rm -f "$TMPFW"
else
	echo "Something went wrong"
	exit
fi

[ "$1" = "enable" ] && exit
[ "$MAIN" = "false" -a "$CONFIG_SSH" = "false" -a "$CONFIG_CUPS" = "false" -a "$CONFIG_SAMBA" = "false" -a "$CONFIG_DLNA" = "false" -a "$CONFIG_NTP" = "false" -a "$CONFIG_FTP" = "false" -a "$CONFIG_HTTP" = "false" -a "$CONFIG_DNS" = "false" -a "$CONFIG_DHCP" = "false" -a "$CONFIG_NFS" = "false" ] && exit

# run it!
yad --image=system-run --layer=overlay --edge=top --text="Starting firewall" --no-buttons --timeout=2 &
urxvt -bg yellow -fg black -geometry 60X10+1+1 --hold -e /etc/init.d/rc.firewall start &
p=$!
sleep 6
kill -9 $p 2>/dev/null

# end
