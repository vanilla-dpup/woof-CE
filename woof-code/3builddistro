#!/bin/sh

. ./WOOFMERGEVARS
. ./DISTRO_SPECS
. ./_00build.conf
. ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}

case "$DISTRO_TARGETARCH" in
x86_64) ARCH=amd64 ;;
x86) ARCH=i386  ;;
arm) ARCH=armhf ;;
arm64) ARCH=aarch64 ;;
*) exit 1 ;;
esac

BDRVSFS="bdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
PUPPYSFS="puppy_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
ZDRVSFS="zdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
FDRVSFS="fdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
ADRVSFS="adrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
YDRVSFS="ydrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
DOCXSFS="docx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
NLSXSFS="nlsx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"

cd sandbox3

rm -rf rootfs-complete
cp -a rootfs rootfs-complete

# remove devx packages pulled as dependencies
for PKG in `echo "$PKGS_SPECS_TABLE" | grep ^yes | grep -F "exe>dev" | cut -f 3 -d \| | tr , ' '`; do
	chroot rootfs-complete apt-get remove --purge -y $PKG
done

# prevent all explicitly added non-development packages from being removed
chroot rootfs-complete apt-mark hold `echo "$PKGS_SPECS_TABLE" | grep ^yes | grep -vF -e "exe>dev" -e "exe>null" | cut -f 3 -d \| | tr , '\n' | grep -vE -e '-dev$' -e '-dev-bin$' -e '-devtools$' -e '-headers$'` busybox net-tools hostname iputils-ping traceroute netcat-openbsd rfkill dc fdisk vim-tiny command-not-found gnome-software fwupd
[ -e rootfs/usr/bin/flatpak ] && chroot rootfs-complete apt-mark hold gnome-software-plugin-flatpak

# remove development packages
for PKG in `chroot rootfs-complete dpkg-query -W -f '${Package}\n' | grep -E -e '-dev$' -e '-dev-bin$' -e '-devtools$' -e '-headers$'`; do
	chroot rootfs-complete apt-get remove --purge -y $PKG
done

# blacklist packages that may conflict with petbuilds
chroot rootfs-complete apt-mark hold busybox
chroot rootfs-complete apt-mark hold busybox-static

# snap is broken without systemd
[ "$DISTRO_BINARY_COMPAT" = "devuan" ] || chroot rootfs-complete apt-mark hold snapd

# prevent updates
chroot rootfs-complete apt-mark hold `chroot rootfs-complete dpkg-query -W -f '${binary:Package}\n' | tr '\n' ' '`

# set locale to en_US.UTF-8
echo "LANG=en_US.UTF-8" >> rootfs-complete/etc/default/locale
sed -i 's~^# en_US\.UTF-8~en_US.UTF-8~' rootfs-complete/etc/locale.gen
chroot rootfs-complete locale-gen
echo "LC_ALL=en_US.UTF-8" >> rootfs-complete/etc/environment

cat << EOF >> rootfs-complete/etc/apt/apt.conf.d/00puppy
# https://github.com/debuerreotype/debuerreotype/blob/6952be0a084e834bd25aa623c94f6ad342899b55/scripts/debuerreotype-minimizing-config#L88
DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb || true"; };
APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb || true"; };
DPkg::Post-Invoke { "/usr/sbin/auto-setup-spot"; };
EOF
chmod 644 rootfs-complete/etc/apt/apt.conf.d/00puppy

printf 'woofwoof\nwoofwoof\n' | chroot rootfs-complete passwd root

chroot rootfs-complete adduser --disabled-password --disabled-login --comment "" spot
chroot rootfs-complete adduser spot video
chroot rootfs-complete adduser spot render
chroot rootfs-complete adduser spot audio

rm -rf rootfs-skeleton
cp -a ../rootfs-skeleton .
mv -f rootfs-skeleton/bin/* rootfs-skeleton/usr/bin/
mv -f rootfs-skeleton/sbin/* rootfs-skeleton/usr/sbin/
rmdir rootfs-skeleton/{bin,sbin}
cp -a rootfs-skeleton/* rootfs-complete/
sed -i -e "s/DISTRO_NAME/$DISTRO_NAME/g" -e "s/DISTRO_VERSION/$DISTRO_VERSION/g" -e "s/DISTRO_FILE_PREFIX/$DISTRO_FILE_PREFIX/g" rootfs-complete/usr/share/doc/puppy/*.md
install -m 644 ../README.md rootfs-complete/usr/share/doc/puppy/woof-CE.md
install -m 644 ../LICENSE rootfs-complete/usr/share/doc/puppy/LICENSE

cd rootfs-complete
for TEMPLATE in ../../packages-templates/*; do
	NAME=${TEMPLATE##*/}
	NAME=${NAME%_FIXUPHACK}
	[ -e var/lib/dpkg/info/${NAME}.list -o -e var/lib/dpkg/info/${NAME}:${ARCH}.list ] || continue
	echo "Applying ${TEMPLATE}"
	bash -c ". ../../DISTRO_SPECS; . ${TEMPLATE}"
	if [ -f pinstall.sh ]; then
		bash pinstall.sh
		rm -f pinstall.sh
	fi
done
cd ..

ROOTFS_PACKAGES="acpid_busybox pup_advert_blocker firewall_ng petget"
[ -e rootfs-complete/usr/bin/swaybg ] && ROOTFS_PACKAGES="$ROOTFS_PACKAGES swaybg_wallpaper"
for NAME in $ROOTFS_PACKAGES; do
	echo "Adding ${NAME}"

	cp -a ../rootfs-packages/${NAME}/* rootfs-complete/

	if [ -f rootfs-complete/pinstall.sh ]; then
		cd rootfs-complete
		bash pinstall.sh
		rm -f pinstall.sh
		cd ..
	fi
done

FOUND_PETBUILDS=
for NAME in $PETBUILDS; do
	if [ ! -e ../rootfs-petbuilds/${NAME} ]; then
		echo "Skipping ${NAME}"
		continue
	fi
	FOUND_PETBUILDS="${FOUND_PETBUILDS} ${NAME}"
done
PETBUILDS="init sfslock $FOUND_PETBUILDS"
CROSSBUILD=0
. ../support/petbuilds.sh

# prevent apt from replacing petbuilds with bigger or incompatible packages
for NAME in $PETBUILDS; do
	chroot rootfs-complete apt-mark hold ${NAME}
done

rm -f rootfs-complete/pet.specs

rm -rf rootfs-complete/usr/share/info

rm -rf rootfs-complete/usr/share/doc/groff-base/{examples,html,pdf}
rm -f rootfs-complete/usr/share/doc/changelog*.gz

rm -f rootfs-complete/etc/fonts/conf.d/10-hinting-slight.conf rootfs-complete/etc/fonts/conf.d/10-autohint.conf
ln -s /usr/share/fontconfig/conf.avail/10-hinting-none.conf rootfs-complete/etc/fonts/conf.d/

cat << EOF > rootfs-complete/etc/issue
$DISTRO_NAME

EOF

# enable colors and shell completion in bash running as root
cat rootfs-complete/etc/skel/.bashrc > rootfs-complete/root/.bashrc

rm -f rootfs-complete/var/cache/apt/archives/*.deb rootfs-complete/var/cache/apt/archives/partial/*.deb
rm -rf rootfs-complete/var/lib/apt/lists/*

rm -rf rootfs-complete/var/cache/man/*
rm -rf rootfs-complete/var/cache/fontconfig/*
rm -rf rootfs-complete/var/cache/ldconfig/*

rm -f rootfs-complete/usr/lib/udev/hwdb.bin

chroot rootfs-complete /usr/sbin/auto-setup-spot
chroot rootfs-complete /etc/rc.d/rc.update w

chmod 700 rootfs-complete/root rootfs-complete/home/spot

rm -rf build
mkdir build

rm -rf fdrv
mkdir -p fdrv/usr/lib
mv rootfs-complete/usr/lib/firmware fdrv/usr/lib/

rm -rf ucode
mkdir -p ucode/kernel/x86/microcode
cat fdrv/usr/lib/firmware/intel-ucode/* > ucode/kernel/x86/microcode/GenuineIntel.bin
rm -f fdrv/usr/lib/firmware/intel-ucode/*
cat fdrv/usr/lib/firmware/amd-ucode/* > ucode/kernel/x86/microcode/AuthenticAMD.bin
rm -f fdrv/usr/lib/firmware/amd-ucode/*
cd ucode
find . | cpio -o -H newc > ../build/ucode.cpio
cd ..
rm -rf ucode

rm -rf nlsx
mkdir -p nlsx/usr/share/locale
mv rootfs-complete/usr/share/locale/* nlsx/usr/share/locale/
mv nlsx/usr/share/locale/locale.alias rootfs-complete/usr/share/locale/

if [ -d rootfs-complete/usr/lib/firefox-esr/browser/extensions ]; then
	mkdir -p nlsx/usr/lib/firefox-esr/browser/extensions
	mv -f rootfs-complete/usr/lib/firefox-esr/browser/extensions/langpack-* nlsx/usr/lib/firefox-esr/browser/extensions/
elif [ -d rootfs-complete/usr/lib/firefox/browser/extensions ]; then
	mkdir -p nlsx/usr/lib/firefox/browser/extensions
	mv -f rootfs-complete/usr/lib/firefox/browser/extensions/langpack-* nlsx/usr/lib/firefox/browser/extensions/
fi

mkdir -p nlsx/usr/share/fonts/truetype/noto
mv -f rootfs-complete/usr/share/fonts/truetype/noto/*.ttf nlsx/usr/share/fonts/truetype/noto/
mv -f nlsx/usr/share/fonts/truetype/noto/{NotoSans,NotoSerif,NotoMono}-*.ttf nlsx/usr/share/fonts/truetype/noto/NotoColorEmoji.ttf rootfs-complete/usr/share/fonts/truetype/noto/
mv -f rootfs-complete/usr/share/fonts/opentype nlsx/usr/share/fonts/

for logosize in 48 96; do
	chroot rootfs-complete rsvg-convert -w ${logosize} -h ${logosize} -o /usr/share/doc/puppylogo${logosize}.png /usr/share/doc/puplogos/${DISTRO_BINARY_COMPAT}.svg
done
rm -rf rootfs-complete/usr/share/doc/puplogos

rm -rf docx
mkdir -p docx/usr/share
mv rootfs-complete/usr/share/{doc,man,help} docx/usr/share/
mkdir rootfs-complete/usr/share/doc
mv docx/usr/share/doc/puppylogo*.png rootfs-complete/usr/share/doc/

cat << EOF >> rootfs-complete/etc/DISTRO_SPECS
DISTRO_BDRVSFS='${BDRVSFS}'
DISTRO_PUPPYSFS='${PUPPYSFS}'
DISTRO_ZDRVSFS='${ZDRVSFS}'
DISTRO_FDRVSFS='${FDRVSFS}'
DISTRO_ADRVSFS='${ADRVSFS}'
DISTRO_YDRVSFS='${YDRVSFS}'
EOF

cd ../initrd-progs
cp -f ../sandbox3/rootfs-complete/etc/DISTRO_SPECS .
./build.sh -arch ${DISTRO_TARGETARCH}

cd ../kernel-kit/output
tar -xjf huge-*-kernel-kit.tar.bz2
cd ../../sandbox3

cp -f ../kernel-kit/output/vmlinuz-*-kernel-kit build/vmlinuz
cp -f ../kernel-kit/output/kbuild-*.sfs build/
cp -f ../kernel-kit/output/kernel-modules-*-kernel-kit.sfs build/${ZDRVSFS}

mv -f ../initrd-progs/initrd.zst build/

mksquashfs fdrv build/${FDRVSFS} ${SFSCOMP}
mksquashfs nlsx build/${NLSXSFS} ${SFSCOMP}
mksquashfs docx build/${DOCXSFS} ${SFSCOMP}
mksquashfs rootfs-complete build/${PUPPYSFS} ${SFSCOMP}

WOOF_OUTPUT="woof-output-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}"
mkdir -p ../${WOOF_OUTPUT}
. ../support/pc_image.sh
