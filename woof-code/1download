#!/bin/sh -ex

. ./DISTRO_SPECS
. ./_00build.conf
. ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}

case "$DISTRO_TARGETARCH" in
x86_64) ARCH=amd64 ;;
x86) ARCH=i386  ;;
arm) ARCH=armhf ;;
arm64) ARCH=aarch64 ;;
*) exit 1 ;;
esac

case "$DISTRO_BINARY_COMPAT" in
debian) MIRROR=http://deb.debian.org/debian ;;
devuan) MIRROR=http://deb.devuan.org/merged ;;
ubuntu) MIRROR=http://archive.ubuntu.com/ubuntu ;;
*) exit 1 ;;
esac

export DEBIAN_FRONTEND=noninteractive

mkdir -p sandbox3
cd sandbox3

CACHE_DIR=`pwd`/../../local-repositories/debootstrap/${DISTRO_TARGETARCH}
mkdir -p "$CACHE_DIR"
TARBALL="${CACHE_DIR}/debootstrap-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}.tar.gz"
[ "$USR_SYMLINKS" != "yes" ] || TARBALL="${CACHE_DIR}/debootstrap-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}-usrmerge.tar.gz"

rm -rf rootfs

if [ "$USR_SYMLINKS" = "yes" -a ! -e ${TARBALL} ]; then
	debootstrap --arch=$ARCH --variant=minbase --include=sysvinit-core --make-tarball=${TARBALL} ${DISTRO_COMPAT_VERSION} rootfs ${MIRROR}
elif [ ! -e ${TARBALL} ]; then
	debootstrap --no-merged-usr --arch=$ARCH --variant=minbase --include=sysvinit-core --make-tarball=${TARBALL} ${DISTRO_COMPAT_VERSION} rootfs ${MIRROR}
fi

# create a tiny installation of the compatible distro
if [ "$USR_SYMLINKS" = "yes" ]; then
	debootstrap --arch=$ARCH --variant=minbase --unpack-tarball=${TARBALL} ${DISTRO_COMPAT_VERSION} rootfs ${MIRROR}
else
	debootstrap --no-merged-usr --arch=$ARCH --variant=minbase --unpack-tarball=${TARBALL} ${DISTRO_COMPAT_VERSION} rootfs ${MIRROR}
fi

rm -f rootfs/etc/resolv.conf
cat /etc/resolv.conf > rootfs/etc/resolv.conf

[ ! -e ${CACHE_DIR}/archives-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}.tar.gz ] || tar -C rootfs -xzf ${CACHE_DIR}/archives-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}.tar.gz

# configure the package manager
case "$DISTRO_BINARY_COMPAT" in
debian)
	case "$DISTRO_COMPAT_VERSION" in
	sid)
		cat << EOF > rootfs/etc/apt/sources.list
deb ${MIRROR} ${DISTRO_COMPAT_VERSION} main contrib non-free non-free-firmware
EOF
		;;
	stretch|buster|bullseye)
		cat << EOF > rootfs/etc/apt/sources.list
deb ${MIRROR} ${DISTRO_COMPAT_VERSION} main contrib non-free
deb ${MIRROR} ${DISTRO_COMPAT_VERSION}-updates main contrib non-free
deb ${MIRROR}-security ${DISTRO_COMPAT_VERSION}-security main contrib non-free
EOF
		;;
	*)
		cat << EOF > rootfs/etc/apt/sources.list
deb ${MIRROR} ${DISTRO_COMPAT_VERSION} main contrib non-free non-free-firmware
deb ${MIRROR} ${DISTRO_COMPAT_VERSION}-updates main contrib non-free non-free-firmware
deb ${MIRROR}-security ${DISTRO_COMPAT_VERSION}-security main contrib non-free non-free-firmware
EOF
		;;
	esac
	;;

devuan)
	case "$DISTRO_COMPAT_VERSION" in
	ceres)
		cat << EOF > rootfs/etc/apt/sources.list
deb ${MIRROR} ${DISTRO_COMPAT_VERSION} main contrib non-free non-free-firmware
EOF
		;;
	ascii|beowulf|chimaera)
		cat << EOF > rootfs/etc/apt/sources.list
deb ${MIRROR} ${DISTRO_COMPAT_VERSION} main contrib non-free
deb ${MIRROR} ${DISTRO_COMPAT_VERSION}-updates main contrib non-free
deb ${MIRROR} ${DISTRO_COMPAT_VERSION}-security main contrib non-free
EOF
		;;
	*)
		cat << EOF > rootfs/etc/apt/sources.list
deb ${MIRROR} ${DISTRO_COMPAT_VERSION} main contrib non-free non-free-firmware
deb ${MIRROR} ${DISTRO_COMPAT_VERSION}-updates main contrib non-free non-free-firmware
deb ${MIRROR} ${DISTRO_COMPAT_VERSION}-security main contrib non-free non-free-firmware
EOF
		;;
	esac
	;;

ubuntu)
	echo "deb ${MIRROR} ${DISTRO_COMPAT_VERSION} main universe multiverse restricted" > rootfs/etc/apt/sources.list

	if [ "$DISTRO_COMPAT_VERSION" != "devel" ]; then
		cat << EOF >> rootfs/etc/apt/sources.list
deb ${MIRROR} ${DISTRO_COMPAT_VERSION}-updates main universe multiverse restricted
deb ${MIRROR} ${DISTRO_COMPAT_VERSION}-security main universe multiverse restricted
EOF
	fi

	# the x86 repo is small, contains popular packages like Steam and won't make apt update 2x slower
	[ "$ARCH" != "amd64" ] || chroot rootfs dpkg --add-architecture i386
	;;
esac
cat << EOF > rootfs/etc/apt/apt.conf.d/00puppy
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF
chroot rootfs apt-get update
chroot rootfs apt-get upgrade -y

# prevent the installation of systemd
chroot rootfs apt-mark hold systemd

# install all packages
PKGS=`echo "$PKGS_SPECS_TABLE" | grep ^yes | grep -vF -e "exe>dev" -e "exe>null" | cut -f 3 -d \| | tr , '\n'`
chroot rootfs apt-get install -y $PKGS

# add busybox, missing package recommendations, Synaptic and gnome-software
chroot rootfs apt-get install -y busybox busybox-syslogd net-tools hostname iputils-ping traceroute netcat-openbsd rfkill dc fdisk vim-tiny command-not-found gnome-software fwupd
[ -e rootfs/usr/bin/flatpak ] && chroot rootfs apt-get install -y gnome-software-plugin-flatpak

# impersonate Puppy
install -m 644 ../DISTRO_SPECS rootfs/etc/DISTRO_SPECS

# install development packages to devx
rm -rf devx
cp -a rootfs devx
PKGS=`echo "$PKGS_SPECS_TABLE" | grep ^yes | grep -F "exe>dev" | cut -f 3 -d \| | tr , " "`
chroot devx apt-get install -y $PKGS

# create an archive of downloaded packages
tar -C devx -c var/cache/apt/archives | gzip -1 > ${CACHE_DIR}/archives-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}.tar.gz

# remove any unneeded packages
chroot rootfs apt-get autoremove -y --purge

# remove unneeded files
chroot rootfs apt-get clean
rm -f rootfs/var/lib/apt/lists/* 2>/dev/null || :
rm -rf rootfs/etc/resolv.conf rootfs/run/* rootfs/var/log/* rootfs/var/cache/man rootfs/var/cache/fontconfig rootfs/var/cache/ldconfig rootfs/usr/share/mime/mime.cache rootfs/etc/ld.so.cache
rm -rf `find rootfs -name __pycache__`
